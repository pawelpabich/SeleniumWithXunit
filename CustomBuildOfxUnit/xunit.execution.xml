<?xml version="1.0"?>
<doc>
    <assembly>
        <name>xunit.execution</name>
    </assembly>
    <members>
        <member name="M:ExceptionExtensions.RethrowWithNoStackTraceLoss(System.Exception)">
            <summary>
            Rethrows an exception object without losing the existing stack trace information
            </summary>
            <param name="ex">The exception to re-throw.</param>
            <remarks>
            For more information on this technique, see
            http://www.dotnetjunkies.com/WebLog/chris.taylor/archive/2004/03/03/8353.aspx.
            The remote_stack_trace string is here to support Mono.
            </remarks>
        </member>
        <member name="M:ExceptionExtensions.Unwrap(System.Exception)">
            <summary>
            Unwraps an exception to remove any wrappers, like <see cref="T:System.Reflection.TargetInvocationException"/>.
            </summary>
            <param name="ex">The exception to unwrap.</param>
            <returns>The unwrapped exception.</returns>
        </member>
        <member name="T:Guard">
            <summary>
            Guard class, used for guard clauses and argument validation
            </summary>
        </member>
        <member name="M:Guard.ArgumentNotNull(System.String,System.Object)">
            <summary/>
        </member>
        <member name="M:Guard.ArgumentNotNullOrEmpty(System.String,System.Collections.IEnumerable)">
            <summary/>
        </member>
        <member name="M:Guard.ArgumentValid(System.String,System.String,System.Boolean)">
            <summary/>
        </member>
        <member name="T:Xunit.Sdk.SourceInformation">
            <summary>
            Default implementation of <see cref="T:Xunit.Abstractions.ISourceInformation"/>.
            </summary>
        </member>
        <member name="T:Xunit.Sdk.LongLivedMarshalByRefObject">
            <summary>
            This class inherits from <see cref="T:System.MarshalByRefObject"/> and re-implements
            <see cref="M:Xunit.Sdk.LongLivedMarshalByRefObject.InitializeLifetimeService"/> in a way that allows the object to live
            longer than the remoting default lifetime (5 minutes).
            </summary>
        </member>
        <member name="M:Xunit.Sdk.LongLivedMarshalByRefObject.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Xunit.Sdk.LongLivedMarshalByRefObject"/> type.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.LongLivedMarshalByRefObject.InitializeLifetimeService">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Sdk.LongLivedMarshalByRefObject.DisconnectAll">
            <summary>
            Disconnects all remote objects.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.SourceInformation.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.Sdk.SourceInformation"/> class.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.SourceInformation.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary/>
        </member>
        <member name="M:Xunit.Sdk.SourceInformation.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.Sdk.SourceInformation.FileName">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.Sdk.SourceInformation.LineNumber">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.TestMessageVisitor`1">
            <summary>
            An implementation of <see cref="T:Xunit.Abstractions.IMessageSink"/> that provides several Visit methods that
            can provide access to specific message types without the burden of casting. It also record
            when it sees a completion message, and sets the <see cref="P:Xunit.TestMessageVisitor`1.Finished"/> event appropriately.
            </summary>
            <typeparam name="TCompleteMessage">The type of the completion message.</typeparam>
        </member>
        <member name="T:Xunit.TestMessageVisitor">
            <summary>
            An implementation of <see cref="T:Xunit.Abstractions.IMessageSink"/> that provides several Visit methods that
            can provide access to specific message types without the burden of casting.
            </summary>
        </member>
        <member name="M:Xunit.TestMessageVisitor.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.TestMessageVisitor.OnMessage(Xunit.Abstractions.IMessageSinkMessage)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.TestMessageVisitor.Visit(Xunit.Abstractions.IAfterTestFinished)">
            <summary>
            Called when an instance of <see cref="T:Xunit.Abstractions.IAfterTestFinished"/> is sent to the message sink.
            </summary>
            <param name="afterTestFinished">The message.</param>
            <returns>Return <c>true</c> to continue executing tests; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Xunit.TestMessageVisitor.Visit(Xunit.Abstractions.IAfterTestStarting)">
            <summary>
            Called when an instance of <see cref="T:Xunit.Abstractions.IAfterTestStarting"/> is sent to the message sink.
            </summary>
            <param name="afterTestStarting">The message.</param>
            <returns>Return <c>true</c> to continue executing tests; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Xunit.TestMessageVisitor.Visit(Xunit.Abstractions.IBeforeTestFinished)">
            <summary>
            Called when an instance of <see cref="T:Xunit.Abstractions.IBeforeTestFinished"/> is sent to the message sink.
            </summary>
            <param name="beforeTestFinished">The message.</param>
            <returns>Return <c>true</c> to continue executing tests; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Xunit.TestMessageVisitor.Visit(Xunit.Abstractions.IBeforeTestStarting)">
            <summary>
            Called when an instance of <see cref="T:Xunit.Abstractions.IBeforeTestStarting"/> is sent to the message sink.
            </summary>
            <param name="beforeTestStarting">The message.</param>
            <returns>Return <c>true</c> to continue executing tests; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Xunit.TestMessageVisitor.Visit(Xunit.Abstractions.IDiscoveryCompleteMessage)">
            <summary>
            Called when an instance of <see cref="T:Xunit.Abstractions.IDiscoveryCompleteMessage"/> is sent to the message sink.
            </summary>
            <param name="discoveryComplete">The message.</param>
            <returns>Return <c>true</c> to continue discovering tests; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Xunit.TestMessageVisitor.Visit(Xunit.Abstractions.IErrorMessage)">
            <summary>
            Called when an instance of <see cref="T:Xunit.Abstractions.IErrorMessage"/> is sent to the message sink.
            </summary>
            <param name="error">The message.</param>
            <returns>Return <c>true</c> to continue executing tests; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Xunit.TestMessageVisitor.Visit(Xunit.Abstractions.ITestAssemblyFinished)">
            <summary>
            Called when an instance of <see cref="T:Xunit.Abstractions.ITestAssemblyFinished"/> is sent to the message sink.
            </summary>
            <param name="assemblyFinished">The message.</param>
            <returns>Return <c>true</c> to continue executing tests; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Xunit.TestMessageVisitor.Visit(Xunit.Abstractions.ITestAssemblyStarting)">
            <summary>
            Called when an instance of <see cref="T:Xunit.Abstractions.ITestAssemblyStarting"/> is sent to the message sink.
            </summary>
            <param name="assemblyStarting">The message.</param>
            <returns>Return <c>true</c> to continue executing tests; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Xunit.TestMessageVisitor.Visit(Xunit.Abstractions.ITestCaseDiscoveryMessage)">
            <summary>
            Called when an instance of <see cref="T:Xunit.Abstractions.ITestCaseDiscoveryMessage"/> is sent to the message sink.
            </summary>
            <param name="testCaseDiscovered">The message.</param>
            <returns>Return <c>true</c> to continue discovering tests; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Xunit.TestMessageVisitor.Visit(Xunit.Abstractions.ITestCaseFinished)">
            <summary>
            Called when an instance of <see cref="T:Xunit.Abstractions.ITestCaseFinished"/> is sent to the message sink.
            </summary>
            <param name="testCaseFinished">The message.</param>
            <returns>Return <c>true</c> to continue executing tests; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Xunit.TestMessageVisitor.Visit(Xunit.Abstractions.ITestCaseStarting)">
            <summary>
            Called when an instance of <see cref="T:Xunit.Abstractions.ITestCaseStarting"/> is sent to the message sink.
            </summary>
            <param name="testCaseStarting">The message.</param>
            <returns>Return <c>true</c> to continue executing tests; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Xunit.TestMessageVisitor.Visit(Xunit.Abstractions.ITestClassConstructionFinished)">
            <summary>
            Called when an instance of <see cref="T:Xunit.Abstractions.ITestClassConstructionFinished"/> is sent to the message sink.
            </summary>
            <param name="testClassConstructionFinished">The message.</param>
            <returns>Return <c>true</c> to continue executing tests; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Xunit.TestMessageVisitor.Visit(Xunit.Abstractions.ITestClassConstructionStarting)">
            <summary>
            Called when an instance of <see cref="T:Xunit.Abstractions.ITestClassConstructionStarting"/> is sent to the message sink.
            </summary>
            <param name="testClassConstructionStarting">The message.</param>
            <returns>Return <c>true</c> to continue executing tests; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Xunit.TestMessageVisitor.Visit(Xunit.Abstractions.ITestClassDisposeFinished)">
            <summary>
            Called when an instance of <see cref="T:Xunit.Abstractions.ITestClassDisposeFinished"/> is sent to the message sink.
            </summary>
            <param name="testClassDisposedFinished">The message.</param>
            <returns>Return <c>true</c> to continue executing tests; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Xunit.TestMessageVisitor.Visit(Xunit.Abstractions.ITestClassDisposeStarting)">
            <summary>
            Called when an instance of <see cref="T:Xunit.Abstractions.ITestClassDisposeStarting"/> is sent to the message sink.
            </summary>
            <param name="testClassDisposeStarting">The message.</param>
            <returns>Return <c>true</c> to continue executing tests; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Xunit.TestMessageVisitor.Visit(Xunit.Abstractions.ITestClassFinished)">
            <summary>
            Called when an instance of <see cref="T:Xunit.Abstractions.ITestClassFinished"/> is sent to the message sink.
            </summary>
            <param name="testClassFinished">The message.</param>
            <returns>Return <c>true</c> to continue executing tests; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Xunit.TestMessageVisitor.Visit(Xunit.Abstractions.ITestClassStarting)">
            <summary>
            Called when an instance of <see cref="T:Xunit.Abstractions.ITestClassStarting"/> is sent to the message sink.
            </summary>
            <param name="testClassStarting">The message.</param>
            <returns>Return <c>true</c> to continue executing tests; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Xunit.TestMessageVisitor.Visit(Xunit.Abstractions.ITestCollectionFinished)">
            <summary>
            Called when an instance of <see cref="T:Xunit.Abstractions.ITestCollectionFinished"/> is sent to the message sink.
            </summary>
            <param name="testCollectionFinished">The message.</param>
            <returns>Return <c>true</c> to continue executing tests; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Xunit.TestMessageVisitor.Visit(Xunit.Abstractions.ITestCollectionStarting)">
            <summary>
            Called when an instance of <see cref="T:Xunit.Abstractions.ITestCollectionStarting"/> is sent to the message sink.
            </summary>
            <param name="testCollectionStarting">The message.</param>
            <returns>Return <c>true</c> to continue executing tests; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Xunit.TestMessageVisitor.Visit(Xunit.Abstractions.ITestFailed)">
            <summary>
            Called when an instance of <see cref="T:Xunit.Abstractions.ITestFailed"/> is sent to the message sink.
            </summary>
            <param name="testFailed">The message.</param>
            <returns>Return <c>true</c> to continue executing tests; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Xunit.TestMessageVisitor.Visit(Xunit.Abstractions.ITestFinished)">
            <summary>
            Called when an instance of <see cref="T:Xunit.Abstractions.ITestFinished"/> is sent to the message sink.
            </summary>
            <param name="testFinished">The message.</param>
            <returns>Return <c>true</c> to continue executing tests; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Xunit.TestMessageVisitor.Visit(Xunit.Abstractions.ITestMethodFinished)">
            <summary>
            Called when an instance of <see cref="T:Xunit.Abstractions.ITestMethodFinished"/> is sent to the message sink.
            </summary>
            <param name="testMethodFinished">The message.</param>
            <returns>Return <c>true</c> to continue executing tests; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Xunit.TestMessageVisitor.Visit(Xunit.Abstractions.ITestMethodStarting)">
            <summary>
            Called when an instance of <see cref="T:Xunit.Abstractions.ITestMethodStarting"/> is sent to the message sink.
            </summary>
            <param name="testMethodStarting">The message.</param>
            <returns>Return <c>true</c> to continue executing tests; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Xunit.TestMessageVisitor.Visit(Xunit.Abstractions.ITestPassed)">
            <summary>
            Called when an instance of <see cref="T:Xunit.Abstractions.ITestPassed"/> is sent to the message sink.
            </summary>
            <param name="testPassed">The message.</param>
            <returns>Return <c>true</c> to continue executing tests; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Xunit.TestMessageVisitor.Visit(Xunit.Abstractions.ITestSkipped)">
            <summary>
            Called when an instance of <see cref="T:Xunit.Abstractions.ITestSkipped"/> is sent to the message sink.
            </summary>
            <param name="testSkipped">The message.</param>
            <returns>Return <c>true</c> to continue executing tests; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Xunit.TestMessageVisitor.Visit(Xunit.Abstractions.ITestStarting)">
            <summary>
            Called when an instance of <see cref="T:Xunit.Abstractions.ITestStarting"/> is sent to the message sink.
            </summary>
            <param name="testStarting">The message.</param>
            <returns>Return <c>true</c> to continue executing tests; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Xunit.TestMessageVisitor`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.TestMessageVisitor`1"/> class.
            </summary>
        </member>
        <member name="M:Xunit.TestMessageVisitor`1.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.TestMessageVisitor`1.OnMessage(Xunit.Abstractions.IMessageSinkMessage)">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.TestMessageVisitor`1.Finished">
            <summary>
            This event is trigged when the completion message has been seen.
            </summary>
        </member>
        <member name="T:Xunit.Sdk.AssertEqualityComparer`1">
            <summary>
            Default implementation of <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> used by the xUnit.net equality assertions.
            </summary>
            <typeparam name="T">The type that is being compared.</typeparam>
        </member>
        <member name="M:Xunit.Sdk.AssertEqualityComparer`1.#ctor(System.Boolean,System.Collections.IEqualityComparer)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.Sdk.AssertEqualityComparer`1"/> class.
            </summary>
            <param name="skipTypeCheck">Set to <c>true</c> to skip type equality checks.</param>
            <param name="innerComparer">The inner comparer to be used when the compared objects are enumerable.</param>
        </member>
        <member name="M:Xunit.Sdk.AssertEqualityComparer`1.Equals(`0,`0)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Sdk.AssertEqualityComparer`1.GetHashCode(`0)">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.Sdk.AssertEqualityComparerAdapter`1">
            <summary>
            A class that wraps <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> to create <see cref="T:System.Collections.IEqualityComparer"/>.
            </summary>
            <typeparam name="T">The type that is being compared.</typeparam>
        </member>
        <member name="M:Xunit.Sdk.AssertEqualityComparerAdapter`1.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.Sdk.AssertEqualityComparerAdapter`1"/> class.
            </summary>
            <param name="innerComparer">The comparer that is being adapted.</param>
        </member>
        <member name="M:Xunit.Sdk.AssertEqualityComparerAdapter`1.Equals(System.Object,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Sdk.AssertEqualityComparerAdapter`1.GetHashCode(System.Object)">
            <inheritdoc/>
        </member>
        <member name="T:ReflectionAbstractionExtensions">
            <summary>
            This class represents utility methods needed to supplement the
            reflection capabilities provided by the CLR
            </summary>
        </member>
        <member name="M:ReflectionAbstractionExtensions.GetBindingFlags(Xunit.Abstractions.IMethodInfo)">
            <summary>
            Gets the binding flags for finding this method via reflection.
            </summary>
            <param name="methodInfo">The method to get binding flags for.</param>
            <returns>The binding flags.</returns>
        </member>
        <member name="M:ReflectionAbstractionExtensions.GetBindingFlags(System.Reflection.MethodInfo)">
            <summary>
            Gets the binding flags for finding this method via reflection.
            </summary>
            <param name="methodInfo">The method to get binding flags for.</param>
            <returns>The binding flags.</returns>
        </member>
        <member name="M:ReflectionAbstractionExtensions.GetCustomAttributes(Xunit.Abstractions.IAssemblyInfo,System.Type)">
            <summary>
            Gets all the custom attributes for the given assembly.
            </summary>
            <param name="assemblyInfo">The assembly</param>
            <param name="attributeType">The type of the attribute</param>
            <returns>The matching attributes that decorate the assembly</returns>
        </member>
        <member name="M:ReflectionAbstractionExtensions.GetCustomAttributes(Xunit.Abstractions.IAttributeInfo,System.Type)">
            <summary>
            Gets all the custom attributes for the given attribute.
            </summary>
            <param name="attributeInfo">The attribute</param>
            <param name="attributeType">The type of the attribute to find</param>
            <returns>The matching attributes that decorate the attribute</returns>
        </member>
        <member name="M:ReflectionAbstractionExtensions.GetCustomAttributes(Xunit.Abstractions.IMethodInfo,System.Type)">
            <summary>
            Gets all the custom attributes for the method that are of the given type.
            </summary>
            <param name="methodInfo">The method</param>
            <param name="attributeType">The type of the attribute</param>
            <returns>The matching attributes that decorate the method</returns>
        </member>
        <member name="M:ReflectionAbstractionExtensions.GetCustomAttributes(Xunit.Abstractions.ITypeInfo,System.Type)">
            <summary>
            Gets all the custom attributes for the given type.
            </summary>
            <param name="typeInfo">The type</param>
            <param name="attributeType">The type of the attribute</param>
            <returns>The matching attributes that decorate the type</returns>
        </member>
        <member name="T:Xunit.Sdk.DefaultTestCaseOrderer">
            <summary>
            Default implementation of <see cref="T:Xunit.Sdk.ITestCaseOrderer"/>. Orders tests in
            an unpredictable but stable order, so that repeated test runs of the
            identical test assembly run tests in the same order.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.DefaultTestCaseOrderer.OrderTestCases``1(System.Collections.Generic.IEnumerable{``0})">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.Sdk.CollectionPerClassTestCollectionFactory">
            <summary>
            Implementation of <see cref="T:Xunit.Sdk.IXunitTestCollectionFactory"/> which creates a new test
            collection for each test class that isn't decorated with <see cref="T:Xunit.CollectionAttribute"/>.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.CollectionPerClassTestCollectionFactory.#ctor(Xunit.Abstractions.IAssemblyInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.Sdk.CollectionPerClassTestCollectionFactory"/> class.
            </summary>
            <param name="assemblyInfo">The assembly.</param>
        </member>
        <member name="M:Xunit.Sdk.CollectionPerClassTestCollectionFactory.#ctor(Xunit.Abstractions.IAssemblyInfo,Xunit.Sdk.IMessageAggregator)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.Sdk.CollectionPerClassTestCollectionFactory"/> class.
            </summary>
            <param name="assemblyInfo">The assembly info.</param>
            <param name="messageAggregator">The message aggregator used to report <see cref="T:Xunit.Sdk.EnvironmentalWarning"/> messages.</param>
        </member>
        <member name="M:Xunit.Sdk.CollectionPerClassTestCollectionFactory.Get(Xunit.Abstractions.IMethodInfo)">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.Sdk.CollectionPerClassTestCollectionFactory.DisplayName">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.Sdk.TestAssemblyRunner`1">
            <summary>
            A base class that provides default behavior when running tests in an assembly. It groups the tests
            by test collection, and then runs the individual test collections.
            </summary>
            <typeparam name="TTestCase">The type of the test case used by the test framework. Must
            derive from <see cref="T:Xunit.Abstractions.ITestCase"/>.</typeparam>
        </member>
        <member name="M:Xunit.Sdk.TestAssemblyRunner`1.#ctor(Xunit.Abstractions.IAssemblyInfo,System.Collections.Generic.IEnumerable{`0},Xunit.Abstractions.IMessageSink,Xunit.Abstractions.ITestFrameworkOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.Sdk.TestAssemblyRunner`1"/> class.
            </summary>
            <param name="assemblyInfo">The assembly that contains the tests to be run.</param>
            <param name="testCases">The test cases to be run.</param>
            <param name="messageSink">The message sink to report run status to.</param>
            <param name="executionOptions">The user's requested execution options.</param>
        </member>
        <member name="M:Xunit.Sdk.TestAssemblyRunner`1.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Sdk.TestAssemblyRunner`1.GetTestFrameworkDisplayName">
            <summary>
            Override this to provide the display name for the test framework (f.e., "xUnit.net 2.0").
            This value is placed into <see cref="P:Xunit.Abstractions.ITestAssemblyStarting.TestFrameworkDisplayName"/>.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.TestAssemblyRunner`1.GetTestFrameworkEnvironment">
            <summary>
            Override this to provide the environment information (f.e., "32-bit .NET 4.0"). This value is
            placed into <see cref="P:Xunit.Abstractions.ITestAssemblyStarting.TestEnvironment"/>.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.TestAssemblyRunner`1.OnAssemblyStarting">
            <summary>
            Override this method to run code just before the test assembly is run.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.TestAssemblyRunner`1.OnAssemblyFinished">
            <summary>
            Override this method to run code just after the test assembly run has finished.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.TestAssemblyRunner`1.CreateMessageBus">
            <summary>
            Creates the message bus to be used for test execution. By default, it inspects
            the options for the <see cref="F:TestOptionsNames.Execution.SynchronousMessageReporting"/>
            flag, and if present, creates a message bus that ensures all messages are delivered
            on the same thread.
            </summary>
            <returns>The message bus.</returns>
        </member>
        <member name="M:Xunit.Sdk.TestAssemblyRunner`1.RunAsync">
            <summary>
            Runs the tests in the test assembly.
            </summary>
            <returns>Returns summary information about the tests that were run.</returns>
        </member>
        <member name="M:Xunit.Sdk.TestAssemblyRunner`1.RunTestCollectionsAsync(Xunit.Sdk.IMessageBus,System.Threading.CancellationTokenSource)">
            <summary>
            Runs the list of test collections. By default, groups the tests by collection and runs them synchronously.
            </summary>
            <param name="messageBus">The message bus to report run status to.</param>
            <param name="cancellationTokenSource">The task cancellation token source, used to cancel the test run.</param>
            <returns>Returns summary information about the tests that were run.</returns>
        </member>
        <member name="M:Xunit.Sdk.TestAssemblyRunner`1.RunTestCollectionAsync(Xunit.Sdk.IMessageBus,Xunit.Abstractions.ITestCollection,System.Collections.Generic.IEnumerable{`0},System.Threading.CancellationTokenSource)">
            <summary>
            Override this method to run the tests in an individual test collection.
            </summary>
            <param name="messageBus">The message bus to report run status to.</param>
            <param name="testCollection">The test collection that is being run.</param>
            <param name="testCases">The test cases to be run.</param>
            <param name="cancellationTokenSource">The task cancellation token source, used to cancel the test run.</param>
            <returns>Returns summary information about the tests that were run.</returns>
        </member>
        <member name="P:Xunit.Sdk.TestAssemblyRunner`1.AssemblyFileName">
            <summary>
            Gets the file name of the assembly under test.
            </summary>
        </member>
        <member name="P:Xunit.Sdk.TestAssemblyRunner`1.AssemblyInfo">
            <summary>
            Gets or sets the assembly that contains the tests to be run.
            </summary>
        </member>
        <member name="P:Xunit.Sdk.TestAssemblyRunner`1.ExecutionOptions">
            <summary>
            Gets or sets the user's requested execution options.
            </summary>
        </member>
        <member name="P:Xunit.Sdk.TestAssemblyRunner`1.MessageSink">
            <summary>
            Gets or sets the message sink to report run status to.
            </summary>
        </member>
        <member name="P:Xunit.Sdk.TestAssemblyRunner`1.TestCaseOrderer">
            <summary>
            Gets or sets the test case orderer that will be used to decide how to order the test.
            </summary>
        </member>
        <member name="P:Xunit.Sdk.TestAssemblyRunner`1.TestCollectionOrderer">
            <summary>
            Gets or sets the test collection orderer that will be used to decide how to order test collections.
            </summary>
        </member>
        <member name="P:Xunit.Sdk.TestAssemblyRunner`1.TestCases">
            <summary>
            Gets or sets the test cases to be run.
            </summary>
        </member>
        <member name="T:Xunit.Sdk.TestClassRunner`1">
            <summary>
            A base class that provides default behavior when running tests in a test class. It groups the tests
            by test method, and then runs the individual test methods.
            </summary>
            <typeparam name="TTestCase">The type of the test case used by the test framework. Must
            derive from <see cref="T:Xunit.Abstractions.ITestCase"/>.</typeparam>
        </member>
        <member name="M:Xunit.Sdk.TestClassRunner`1.#ctor(Xunit.Abstractions.ITestCollection,Xunit.Abstractions.IReflectionTypeInfo,System.Collections.Generic.IEnumerable{`0},Xunit.Sdk.IMessageBus,Xunit.Sdk.ITestCaseOrderer,Xunit.Sdk.ExceptionAggregator,System.Threading.CancellationTokenSource)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.Sdk.TestClassRunner`1"/> class.
            </summary>
            <param name="testCollection">The test collection that contains the test class.</param>
            <param name="testClass">The test class that contains the tests to be run.</param>
            <param name="testCases">The test cases to be run.</param>
            <param name="messageBus">The message bus to report run status to.</param>
            <param name="testCaseOrderer">The test case orderer that will be used to decide how to order the test.</param>
            <param name="aggregator">The exception aggregator used to run code and collection exceptions.</param>
            <param name="cancellationTokenSource">The task cancellation token source, used to cancel the test run.</param>
        </member>
        <member name="M:Xunit.Sdk.TestClassRunner`1.CreateTestClassConstructorArguments">
            <summary>
            Creates the arguments for the test class constructor. Attempts to resolve each parameter
            individually, and adds an error when the constructor arguments cannot all be provided.
            If the class is static, does not look for constructor, since one will not be needed.
            </summary>
            <returns>The test class constructor arguments.</returns>
        </member>
        <member name="M:Xunit.Sdk.TestClassRunner`1.OnTestClassStarting">
            <summary>
            Override this method to run code just before the test class is run.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.TestClassRunner`1.OnTestClassFinished">
            <summary>
            Override this method to run code just after the test class run has finished.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.TestClassRunner`1.RunAsync">
            <summary>
            Runs the tests in the test class.
            </summary>
            <returns>Returns summary information about the tests that were run.</returns>
        </member>
        <member name="M:Xunit.Sdk.TestClassRunner`1.RunTestMethodsAsync">
            <summary>
            Runs the list of test methods. By default, orders the tests, groups them by method and runs them synchronously.
            </summary>
            <returns>Returns summary information about the tests that were run.</returns>
        </member>
        <member name="M:Xunit.Sdk.TestClassRunner`1.RunTestMethodAsync(Xunit.Abstractions.IReflectionMethodInfo,System.Collections.Generic.IEnumerable{`0},System.Object[])">
            <summary>
            Override this method to run the tests in an individual test method.
            </summary>
            <param name="testMethod">The test method that contains the tests to be run.</param>
            <param name="testCases">The test cases to be run.</param>
            <param name="constructorArguments">The constructor arguments that will be used to create the test class.</param>
            <returns>Returns summary information about the tests that were run.</returns>
        </member>
        <member name="M:Xunit.Sdk.TestClassRunner`1.SelectTestClassConstructor">
            <summary>
            Selects the constructor to be used for the test class. By default, chooses the parameterless
            constructor. Override to change the constructor selection logic.
            </summary>
            <returns>The constructor to be used for creating the test class.</returns>
        </member>
        <member name="M:Xunit.Sdk.TestClassRunner`1.TryGetConstructorArgument(System.Reflection.ConstructorInfo,System.Int32,System.Reflection.ParameterInfo,System.Object@)">
            <summary>
            Tries to supply a test class constructor argument. By default, always fails. Override to
            change the argument lookup logic.
            </summary>
            <param name="constructor">The constructor that will be used to create the test class.</param>
            <param name="index">The parameter index.</param>
            <param name="parameter">The parameter information.</param>
            <param name="argumentValue">The argument value that should be used for the parameter.</param>
            <returns>Returns <c>true</c> if the argument was supplied; <c>false</c>, otherwise.</returns>
        </member>
        <member name="P:Xunit.Sdk.TestClassRunner`1.Aggregator">
            <summary>
            Gets or sets the exception aggregator used to run code and collection exceptions.
            </summary>
        </member>
        <member name="P:Xunit.Sdk.TestClassRunner`1.CancellationTokenSource">
            <summary>
            Gets or sets he task cancellation token source, used to cancel the test run.
            </summary>
        </member>
        <member name="P:Xunit.Sdk.TestClassRunner`1.MessageBus">
            <summary>
            Gets or sets the message bus to report run status to.
            </summary>
        </member>
        <member name="P:Xunit.Sdk.TestClassRunner`1.TestCaseOrderer">
            <summary>
            Gets or sets the test case orderer that will be used to decide how to order the test.
            </summary>
        </member>
        <member name="P:Xunit.Sdk.TestClassRunner`1.TestCases">
            <summary>
            Gets or sets the test cases to be run.
            </summary>
        </member>
        <member name="P:Xunit.Sdk.TestClassRunner`1.TestClass">
            <summary>
            Gets or sets the test class that contains the tests to be run.
            </summary>
        </member>
        <member name="P:Xunit.Sdk.TestClassRunner`1.TestCollection">
            <summary>
            Gets or sets the test collection that contains the test class.
            </summary>
        </member>
        <member name="T:Xunit.Sdk.TestCollectionRunner`1">
            <summary>
            A base class that provides default behavior when running tests in a test collection. It groups the tests
            by test class, and then runs the individual test classes.
            </summary>
            <typeparam name="TTestCase">The type of the test case used by the test framework. Must
            derive from <see cref="T:Xunit.Abstractions.ITestCase"/>.</typeparam>
        </member>
        <member name="M:Xunit.Sdk.TestCollectionRunner`1.#ctor(Xunit.Abstractions.ITestCollection,System.Collections.Generic.IEnumerable{`0},Xunit.Sdk.IMessageBus,Xunit.Sdk.ITestCaseOrderer,System.Threading.CancellationTokenSource)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.Sdk.TestCollectionRunner`1"/> class.
            </summary>
            <param name="testCollection">The test collection that contains the tests to be run.</param>
            <param name="testCases">The test cases to be run.</param>
            <param name="messageBus">The message bus to report run status to.</param>
            <param name="testCaseOrderer">The test case orderer that will be used to decide how to order the test.</param>
            <param name="cancellationTokenSource">The task cancellation token source, used to cancel the test run.</param>
        </member>
        <member name="M:Xunit.Sdk.TestCollectionRunner`1.OnTestCollectionStarting">
            <summary>
            Override this method to run code just before the test collection is run.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.TestCollectionRunner`1.OnTestCollectionFinished">
            <summary>
            Override this method to run code just after the test collection run has finished.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.TestCollectionRunner`1.RunAsync">
            <summary>
            Runs the tests in the test collection.
            </summary>
            <returns>Returns summary information about the tests that were run.</returns>
        </member>
        <member name="M:Xunit.Sdk.TestCollectionRunner`1.RunTestClassesAsync">
            <summary>
            Runs the list of test classes. By default, groups the tests by class and runs them synchronously.
            </summary>
            <returns>Returns summary information about the tests that were run.</returns>
        </member>
        <member name="M:Xunit.Sdk.TestCollectionRunner`1.RunTestClassAsync(Xunit.Abstractions.IReflectionTypeInfo,System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Override this method to run the tests in an individual test class.
            </summary>
            <param name="testClass">The test class that contains the tests to be run.</param>
            <param name="testCases">The test cases to be run.</param>
            <returns>Returns summary information about the tests that were run.</returns>
        </member>
        <member name="P:Xunit.Sdk.TestCollectionRunner`1.Aggregator">
            <summary>
            Gets or sets the exception aggregator used to run code and collection exceptions.
            </summary>
        </member>
        <member name="P:Xunit.Sdk.TestCollectionRunner`1.CancellationTokenSource">
            <summary>
            Gets or sets he task cancellation token source, used to cancel the test run.
            </summary>
        </member>
        <member name="P:Xunit.Sdk.TestCollectionRunner`1.MessageBus">
            <summary>
            Gets or sets the message bus to report run status to.
            </summary>
        </member>
        <member name="P:Xunit.Sdk.TestCollectionRunner`1.TestCaseOrderer">
            <summary>
            Gets or sets the test case orderer that will be used to decide how to order the test.
            </summary>
        </member>
        <member name="P:Xunit.Sdk.TestCollectionRunner`1.TestCases">
            <summary>
            Gets or sets the test cases to be run.
            </summary>
        </member>
        <member name="P:Xunit.Sdk.TestCollectionRunner`1.TestCollection">
            <summary>
            Gets or sets the test collection that contains the tests to be run.
            </summary>
        </member>
        <member name="T:Xunit.Sdk.XunitTestAssemblyRunner">
            <summary>
            The test assembly runner for xUnit.net v2 tests.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.XunitTestAssemblyRunner.#ctor(Xunit.Abstractions.IAssemblyInfo,System.Collections.Generic.IEnumerable{Xunit.Sdk.IXunitTestCase},Xunit.Abstractions.IMessageSink,Xunit.Abstractions.ITestFrameworkOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.Sdk.XunitTestAssemblyRunner"/> class.
            </summary>
            <param name="assemblyInfo">The assembly that contains the tests to be run.</param>
            <param name="testCases">The test cases to be run.</param>
            <param name="messageSink">The message sink to report run status to.</param>
            <param name="executionOptions">The user's requested execution options.</param>
        </member>
        <member name="M:Xunit.Sdk.XunitTestAssemblyRunner.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Sdk.XunitTestAssemblyRunner.GetTestFrameworkDisplayName">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Sdk.XunitTestAssemblyRunner.GetTestFrameworkEnvironment">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Sdk.XunitTestAssemblyRunner.GetTaskScheduler(System.Int32)">
            <summary>
            Gets the task scheduler used when potentially running tests in parallel.
            If <paramref name="maxParallelThreads"/> is greater than 0, it creates
            and returns an instance of <see cref="T:Xunit.Sdk.MaxConcurrencyTaskScheduler"/>;
            otherwise, it uses the default task scheduler (which runs tasks on
            the thread pool).
            </summary>
            <param name="maxParallelThreads">The maximum number of parallel threads.</param>
            <returns>The task scheduler.</returns>
        </member>
        <member name="M:Xunit.Sdk.XunitTestAssemblyRunner.OnAssemblyStarting">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Sdk.XunitTestAssemblyRunner.RunTestCollectionsAsync(Xunit.Sdk.IMessageBus,System.Threading.CancellationTokenSource)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Sdk.XunitTestAssemblyRunner.RunTestCollectionAsync(Xunit.Sdk.IMessageBus,Xunit.Abstractions.ITestCollection,System.Collections.Generic.IEnumerable{Xunit.Sdk.IXunitTestCase},System.Threading.CancellationTokenSource)">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.Sdk.XunitTestClassRunner">
            <summary>
            The test class runner for xUnit.net v2 tests.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.XunitTestClassRunner.#ctor(Xunit.Abstractions.ITestCollection,Xunit.Abstractions.IReflectionTypeInfo,System.Collections.Generic.IEnumerable{Xunit.Sdk.IXunitTestCase},Xunit.Sdk.IMessageBus,Xunit.Sdk.ITestCaseOrderer,Xunit.Sdk.ExceptionAggregator,System.Threading.CancellationTokenSource,System.Collections.Generic.IDictionary{System.Type,System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.Sdk.XunitTestClassRunner"/> class.
            </summary>
            <param name="testCollection">The test collection that contains the test class.</param>
            <param name="testClass">The test class that contains the tests to be run.</param>
            <param name="testCases">The test cases to be run.</param>
            <param name="messageBus">The message bus to report run status to.</param>
            <param name="testCaseOrderer">The test case orderer that will be used to decide how to order the test.</param>
            <param name="aggregator">The exception aggregator used to run code and collection exceptions.</param>
            <param name="cancellationTokenSource">The task cancellation token source, used to cancel the test run.</param>
            <param name="collectionFixtureMappings">The mapping of collection fixture types to fixtures.</param>
        </member>
        <member name="M:Xunit.Sdk.XunitTestClassRunner.OnTestClassStarting">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Sdk.XunitTestClassRunner.OnTestClassFinished">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Sdk.XunitTestClassRunner.RunTestMethodAsync(Xunit.Abstractions.IReflectionMethodInfo,System.Collections.Generic.IEnumerable{Xunit.Sdk.IXunitTestCase},System.Object[])">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Sdk.XunitTestClassRunner.SelectTestClassConstructor">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Sdk.XunitTestClassRunner.TryGetConstructorArgument(System.Reflection.ConstructorInfo,System.Int32,System.Reflection.ParameterInfo,System.Object@)">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.Sdk.XunitTestCollectionRunner">
            <summary>
            The test collection runner for xUnit.net v2 tests.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.XunitTestCollectionRunner.#ctor(Xunit.Abstractions.ITestCollection,System.Collections.Generic.IEnumerable{Xunit.Sdk.IXunitTestCase},Xunit.Sdk.IMessageBus,Xunit.Sdk.ITestCaseOrderer,System.Threading.CancellationTokenSource)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.Sdk.XunitTestCollectionRunner"/> class.
            </summary>
            <param name="testCollection">The test collection that contains the tests to be run.</param>
            <param name="testCases">The test cases to be run.</param>
            <param name="messageBus">The message bus to report run status to.</param>
            <param name="testCaseOrderer">The test case orderer that will be used to decide how to order the test.</param>
            <param name="cancellationTokenSource">The task cancellation token source, used to cancel the test run.</param>
        </member>
        <member name="M:Xunit.Sdk.XunitTestCollectionRunner.OnTestCollectionStarting">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Sdk.XunitTestCollectionRunner.OnTestCollectionFinished">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Sdk.XunitTestCollectionRunner.RunTestClassAsync(Xunit.Abstractions.IReflectionTypeInfo,System.Collections.Generic.IEnumerable{Xunit.Sdk.IXunitTestCase})">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.Sdk.TestCollectionComparer">
            <summary>
            An implementation of <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> for <see cref="T:Xunit.Abstractions.ITestCollection"/>.
            Compares the IDs of the test collections.
            </summary>
        </member>
        <member name="F:Xunit.Sdk.TestCollectionComparer.Instance">
            <summary>
            The singleton instance of the comparer.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.TestCollectionComparer.Equals(Xunit.Abstractions.ITestCollection,Xunit.Abstractions.ITestCollection)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Sdk.TestCollectionComparer.GetHashCode(Xunit.Abstractions.ITestCollection)">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.Sdk.DisposalTracker">
            <summary>
            Tracks disposable objects, and disposes them in the reverse order they were added to
            the tracker.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.DisposalTracker.Add(System.IDisposable)">
            <summary>
            Add an object to be disposed.
            </summary>
            <param name="disposable">The object to be disposed.</param>
        </member>
        <member name="M:Xunit.Sdk.DisposalTracker.Dispose">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.Sdk.TestFramework">
            <summary>
            A default implementation of <see cref="T:Xunit.Abstractions.ITestFramework"/> that tracks objects to be
            disposed when the framework is disposed. The discoverer and executor are automatically
            tracked for disposal, since those interfaces mandate an implementation of <see cref="T:System.IDisposable"/>.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.TestFramework.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.Sdk.XunitTestFramework"/> class.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.TestFramework.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Sdk.TestFramework.CreateDiscoverer(Xunit.Abstractions.IAssemblyInfo)">
            <summary>
            Override this method to provide the implementation of <see cref="T:Xunit.Abstractions.ITestFrameworkDiscoverer"/>.
            </summary>
            <param name="assemblyInfo">The assembly that is being discovered.</param>
            <returns>Returns the test framework discoverer.</returns>
        </member>
        <member name="M:Xunit.Sdk.TestFramework.CreateExecutor(System.Reflection.AssemblyName)">
            <summary>
            Override this method to provide the implementation of <see cref="T:Xunit.Abstractions.ITestFrameworkExecutor"/>.
            </summary>
            <param name="assemblyName">The assembly that is being executed.</param>
            <returns>Returns the test framework executor.</returns>
        </member>
        <member name="M:Xunit.Sdk.TestFramework.GetDiscoverer(Xunit.Abstractions.IAssemblyInfo)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Sdk.TestFramework.GetExecutor(System.Reflection.AssemblyName)">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.Sdk.TestFramework.DisposalTracker">
            <summary>
            Gets the disposal tracker for the test framework.
            </summary>
        </member>
        <member name="P:Xunit.Sdk.TestFramework.SourceInformationProvider">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.Sdk.TestFrameworkDiscoverer">
            <summary>
            A base implementation of <see cref="T:Xunit.Abstractions.ITestFrameworkDiscoverer"/> that supports test filtering
            and runs the discovery process on a thread pool thread.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.TestFrameworkDiscoverer.#ctor(Xunit.Abstractions.IAssemblyInfo,Xunit.Abstractions.ISourceInformationProvider,Xunit.Sdk.IMessageAggregator)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.Sdk.XunitTestFrameworkDiscoverer"/> class.
            </summary>
            <param name="assemblyInfo">The test assembly.</param>
            <param name="sourceProvider">The source information provider.</param>
            <param name="messageAggregator">The message aggregator to receive environmental warnings from.</param>
        </member>
        <member name="M:Xunit.Sdk.TestFrameworkDiscoverer.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Sdk.TestFrameworkDiscoverer.Find(System.Boolean,Xunit.Abstractions.IMessageSink,Xunit.Abstractions.ITestFrameworkOptions)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Sdk.TestFrameworkDiscoverer.Find(System.String,System.Boolean,Xunit.Abstractions.IMessageSink,Xunit.Abstractions.ITestFrameworkOptions)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Sdk.TestFrameworkDiscoverer.FindTestsForType(Xunit.Abstractions.ITypeInfo,System.Boolean,Xunit.Sdk.IMessageBus)">
            <summary>
            Core implementation to discover unit tests in a given test class.
            </summary>
            <param name="type">The test class.</param>
            <param name="includeSourceInformation">Set to <c>true</c> to attempt to include source information.</param>
            <param name="messageBus">The message sink to send discovery messages to.</param>
            <returns>Returns <c>true</c> if discovery should continue; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Xunit.Sdk.TestFrameworkDiscoverer.IsValidTestClass(Xunit.Abstractions.ITypeInfo)">
            <summary>
            Determines if a type should be used for discovery. Can be used to filter out types that
            are not desirable. The default implementation filters out abstract (non-static) classes.
            </summary>
            <param name="type">The type.</param>
            <returns>Returns <c>true</c> if the type can contain tests; <c>false</c>, otherwise.</returns>
        </member>
        <member name="M:Xunit.Sdk.TestFrameworkDiscoverer.ReportDiscoveredTestCase(Xunit.Abstractions.ITestCase,System.Boolean,Xunit.Sdk.IMessageBus)">
            <summary>
            Reports a discovered test case to the message bus, after updating the source code information
            (if desired).
            </summary>
            <param name="testCase"></param>
            <param name="includeSourceInformation"></param>
            <param name="messageBus"></param>
            <returns></returns>
        </member>
        <member name="M:Xunit.Sdk.TestFrameworkDiscoverer.Serialize(Xunit.Abstractions.ITestCase)">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.Sdk.TestFrameworkDiscoverer.Aggregator">
            <summary>
            Gets the message aggregator used to provide environmental warnings.
            </summary>
        </member>
        <member name="P:Xunit.Sdk.TestFrameworkDiscoverer.AssemblyInfo">
            <summary>
            Gets the assembly that's being discovered.
            </summary>
        </member>
        <member name="P:Xunit.Sdk.TestFrameworkDiscoverer.DisposalTracker">
            <summary>
            Gets the disposal tracker for the test framework discoverer.
            </summary>
        </member>
        <member name="P:Xunit.Sdk.TestFrameworkDiscoverer.SourceProvider">
            <summary>
            Get the source code information provider used during discovery.
            </summary>
        </member>
        <member name="P:Xunit.Sdk.TestFrameworkDiscoverer.TestFrameworkDisplayName">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.Sdk.TestFrameworkExecutor`1">
            <summary>
            A reusable implementation of <see cref="T:Xunit.Abstractions.ITestFrameworkExecutor"/> which contains the basic behavior
            for running tests.
            </summary>
            <typeparam name="TTestCase">The type of the test case used by the test framework. Must
            derive from <see cref="T:Xunit.Abstractions.ITestCase"/>.</typeparam>
        </member>
        <member name="M:Xunit.Sdk.TestFrameworkExecutor`1.#ctor(System.Reflection.AssemblyName,Xunit.Abstractions.ISourceInformationProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.Sdk.TestFrameworkExecutor`1"/> class.
            </summary>
            <param name="assemblyName">Name of the test assembly.</param>
            <param name="sourceInformationProvider">The source line number information provider.</param>
        </member>
        <member name="M:Xunit.Sdk.TestFrameworkExecutor`1.CreateDiscoverer">
            <summary>
            Override to create a test framework discoverer that can be used to discover
            tests when the user asks to run all test.
            </summary>
            <returns>The test framework discoverer</returns>
        </member>
        <member name="M:Xunit.Sdk.TestFrameworkExecutor`1.Deserialize(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Sdk.TestFrameworkExecutor`1.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Sdk.TestFrameworkExecutor`1.RunAll(Xunit.Abstractions.IMessageSink,Xunit.Abstractions.ITestFrameworkOptions,Xunit.Abstractions.ITestFrameworkOptions)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Sdk.TestFrameworkExecutor`1.RunTests(System.Collections.Generic.IEnumerable{Xunit.Abstractions.ITestCase},Xunit.Abstractions.IMessageSink,Xunit.Abstractions.ITestFrameworkOptions)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Sdk.TestFrameworkExecutor`1.RunTestCases(System.Collections.Generic.IEnumerable{`0},Xunit.Abstractions.IMessageSink,Xunit.Abstractions.ITestFrameworkOptions)">
            <summary>
            Override to run test cases.
            </summary>
            <param name="testCases">The test cases to be run.</param>
            <param name="messageSink">The message sink to report run status to.</param>
            <param name="executionOptions">The user's requested execution options.</param>
        </member>
        <member name="P:Xunit.Sdk.TestFrameworkExecutor`1.AssemblyInfo">
            <summary>
            Gets the assembly information of the assembly under test.
            </summary>
        </member>
        <member name="P:Xunit.Sdk.TestFrameworkExecutor`1.DisposalTracker">
            <summary>
            Gets the disposal tracker for the test framework discoverer.
            </summary>
        </member>
        <member name="P:Xunit.Sdk.TestFrameworkExecutor`1.SourceInformationProvider">
            <summary>
            Gets the source information provider.
            </summary>
        </member>
        <member name="T:Xunit.Sdk.TestFrameworkProxy">
            <summary>
            This class proxies for the real implementation of <see cref="T:Xunit.Abstractions.ITestFramework"/>, based on
            whether the user has overridden the choice via <see cref="T:Xunit.TestFrameworkAttribute"/>. If
            no attribute is found, defaults to <see cref="T:Xunit.Sdk.XunitTestFramework"/>.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.TestFrameworkProxy.#ctor(System.Object,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.Sdk.TestFrameworkProxy"/> class.
            </summary>
            <param name="testAssemblyObject">The test assembly (expected to implement <see cref="T:Xunit.Abstractions.IAssemblyInfo"/>).</param>
            <param name="sourceInformationProviderObject">The source information provider (expected to implement <see cref="T:Xunit.Abstractions.ISourceInformationProvider"/>).</param>
        </member>
        <member name="M:Xunit.Sdk.TestFrameworkProxy.GetDiscoverer(Xunit.Abstractions.IAssemblyInfo)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Sdk.TestFrameworkProxy.GetExecutor(System.Reflection.AssemblyName)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Sdk.TestFrameworkProxy.Dispose">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.Sdk.TestFrameworkProxy.SourceInformationProvider">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.Sdk.ExtensibilityPointFactory">
            <summary>
            Represents a caching factory for the types used for extensibility throughout the system.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.ExtensibilityPointFactory.Dispose">
            <summary>
            Disposes the instances that are contained in the cache.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.ExtensibilityPointFactory.Get``1(System.Type,System.Object[])">
            <summary>
            Gets an instance of the given type, casting it to <typeparamref name="TInterface"/>, using the provided
            constructor arguments. There is a single instance of a given type that is cached and reused,
            so classes retrieved from this factory must be stateless and thread-safe.
            </summary>
            <typeparam name="TInterface">The interface type.</typeparam>
            <param name="type">The implementation type.</param>
            <param name="ctorArgs">The constructor arguments.</param>
            <returns>The instance of the type.</returns>
        </member>
        <member name="M:Xunit.Sdk.ExtensibilityPointFactory.GetDataDiscoverer(System.Type)">
            <summary>
            Gets a data discoverer.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.ExtensibilityPointFactory.GetDataDiscoverer(Xunit.Abstractions.IAttributeInfo)">
            <summary>
            Gets a data discoverer, as specified in a reflected <see cref="T:Xunit.Sdk.DataDiscovererAttribute"/>.
            </summary>
            <param name="dataDiscovererAttribute">The data discoverer attribute</param>
            <returns>The data discoverer, if the type is loadable; <c>null</c>, otherwise.</returns>
        </member>
        <member name="M:Xunit.Sdk.ExtensibilityPointFactory.GetTestCaseOrderer(System.Type)">
            <summary>
            Gets a test case orderer.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.ExtensibilityPointFactory.GetTestCollectionOrderer(System.Type)">
            <summary>
            Gets a test collection orderer.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.ExtensibilityPointFactory.GetTestCaseOrderer(Xunit.Abstractions.IAttributeInfo)">
            <summary>
            Gets a test case orderer, as specified in a reflected <see cref="T:Xunit.TestCaseOrdererAttribute"/>.
            </summary>
            <param name="testCaseOrdererAttribute">The test case orderer attribute.</param>
            <returns>The test case orderer, if the type is loadable; <c>null</c>, otherwise.</returns>
        </member>
        <member name="M:Xunit.Sdk.ExtensibilityPointFactory.GetTraitDiscoverer(System.Type)">
            <summary>
            Gets a trait discoverer.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.ExtensibilityPointFactory.GetTraitDiscoverer(Xunit.Abstractions.IAttributeInfo)">
            <summary>
            Gets a trait discoverer, as specified in a reflected <see cref="T:Xunit.Sdk.TraitDiscovererAttribute"/>.
            </summary>
            <param name="traitDiscovererAttribute">The trait discoverer attribute.</param>
            <returns>The trait discoverer, if the type is loadable; <c>null</c>, otherwise.</returns>
        </member>
        <member name="M:Xunit.Sdk.ExtensibilityPointFactory.GetXunitTestCaseDiscoverer(System.Type)">
            <summary>
            Gets an xUnit.net v2 test discoverer.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.ExtensibilityPointFactory.GetXunitTestCollectionFactory(System.Type,Xunit.Abstractions.IAssemblyInfo)">
            <summary>
            Gets an xUnit.net v2 test collection factory.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.ExtensibilityPointFactory.GetXunitTestCollectionFactory(Xunit.Abstractions.IAttributeInfo,Xunit.Abstractions.IAssemblyInfo)">
            <summary>
            Gets an xUnit.net v2 test collection factory, as specified in a reflected <see cref="T:Xunit.CollectionBehaviorAttribute"/>.
            </summary>
            <param name="collectionBehaviorAttribute">The collection behavior attribute.</param>
            <param name="assemblyInfo">The test assembly.</param>
            <returns>The collection factory.</returns>
        </member>
        <member name="T:Xunit.Sdk.XunitTestMethodRunner">
            <summary>
            The test method runner for xUnit.net v2 tests.
            </summary>
        </member>
        <member name="T:Xunit.Sdk.TestMethodRunner`1">
            <summary>
            A base class that provides default behavior when running tests in a test method.
            </summary>
            <typeparam name="TTestCase">The type of the test case used by the test framework. Must
            derive from <see cref="T:Xunit.Abstractions.ITestCase"/>.</typeparam>
        </member>
        <member name="M:Xunit.Sdk.TestMethodRunner`1.#ctor(Xunit.Abstractions.ITestCollection,Xunit.Abstractions.IReflectionTypeInfo,Xunit.Abstractions.IReflectionMethodInfo,System.Collections.Generic.IEnumerable{`0},Xunit.Sdk.IMessageBus,System.Threading.CancellationTokenSource)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.Sdk.TestMethodRunner`1"/> class.
            </summary>
            <param name="testCollection">The test collection that contains the test class.</param>
            <param name="testClass">The test class that contains the test method.</param>
            <param name="testMethod">The test method that contains the tests to be run.</param>
            <param name="testCases">The test cases to be run.</param>
            <param name="messageBus">The message bus to report run status to.</param>
            <param name="cancellationTokenSource">The task cancellation token source, used to cancel the test run.</param>
        </member>
        <member name="M:Xunit.Sdk.TestMethodRunner`1.OnTestMethodFinished">
            <summary>
            Override this method to run code just before the test method is run.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.TestMethodRunner`1.OnTestMethodStarting">
            <summary>
            Override this method to run code just after the test method run has finished.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.TestMethodRunner`1.RunAsync">
            <summary>
            Runs the tests in the test method.
            </summary>
            <returns>Returns summary information about the tests that were run.</returns>
        </member>
        <member name="M:Xunit.Sdk.TestMethodRunner`1.RunTestCasesAsync">
            <summary>
            Runs the list of test cases. By default, it runs the cases in order, synchronously.
            </summary>
            <returns>Returns summary information about the tests that were run.</returns>
        </member>
        <member name="M:Xunit.Sdk.TestMethodRunner`1.RunTestCaseAsync(`0)">
            <summary>
            Override this method to run an individual test case.
            </summary>
            <param name="testCase">The test case to be run.</param>
            <returns>Returns summary information about the test case run.</returns>
        </member>
        <member name="P:Xunit.Sdk.TestMethodRunner`1.CancellationTokenSource">
            <summary>
            Gets or sets he task cancellation token source, used to cancel the test run.
            </summary>
        </member>
        <member name="P:Xunit.Sdk.TestMethodRunner`1.MessageBus">
            <summary>
            Gets or sets the message bus to report run status to.
            </summary>
        </member>
        <member name="P:Xunit.Sdk.TestMethodRunner`1.TestCases">
            <summary>
            Gets or sets the test cases to be run.
            </summary>
        </member>
        <member name="P:Xunit.Sdk.TestMethodRunner`1.TestClass">
            <summary>
            Gets or sets the test class that contains the test method.
            </summary>
        </member>
        <member name="P:Xunit.Sdk.TestMethodRunner`1.TestCollection">
            <summary>
            Gets or sets the test collection that contains the test class.
            </summary>
        </member>
        <member name="P:Xunit.Sdk.TestMethodRunner`1.TestMethod">
            <summary>
            Gets or sets the test method that contains the tests to be run.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.XunitTestMethodRunner.#ctor(Xunit.Abstractions.ITestCollection,Xunit.Abstractions.IReflectionTypeInfo,Xunit.Abstractions.IReflectionMethodInfo,System.Collections.Generic.IEnumerable{Xunit.Sdk.IXunitTestCase},Xunit.Sdk.IMessageBus,System.Threading.CancellationTokenSource,Xunit.Sdk.ExceptionAggregator,System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.Sdk.XunitTestMethodRunner"/> class.
            </summary>
            <param name="testCollection">The test collection that contains the test class.</param>
            <param name="testClass">The test class that contains the test method.</param>
            <param name="testMethod">The test method that contains the tests to be run.</param>
            <param name="testCases">The test cases to be run.</param>
            <param name="messageBus">The message bus to report run status to.</param>
            <param name="cancellationTokenSource">The task cancellation token source, used to cancel the test run.</param>
            <param name="aggregator">The exception aggregator used to run code and collection exceptions.</param>
            <param name="constructorArguments">The constructor arguments for the test class.</param>
        </member>
        <member name="M:Xunit.Sdk.XunitTestMethodRunner.RunTestCaseAsync(Xunit.Sdk.IXunitTestCase)">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.Sdk.MaxConcurrencyTaskScheduler">
            <summary>
            This class limits concurrency for all Tasks that are started with this scheduler, and
            also uses the stopwatch from the dictionary based on the lookup key that is passed as
            the async state to the task during creation. CallContext data is used to flow the
            stopwatch lookup key throughout the process (when it's not present, it pulls the key
            from the Task's AsyncState).
            </summary>
        </member>
        <member name="M:Xunit.Sdk.MaxConcurrencyTaskScheduler.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.Sdk.MaxConcurrencyTaskScheduler"/> class.
            </summary>
            <param name="maximumConcurrencyLevel">The maximum number of tasks to run at any one time.</param>
        </member>
        <member name="M:Xunit.Sdk.MaxConcurrencyTaskScheduler.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Sdk.MaxConcurrencyTaskScheduler.GetScheduledTasks">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Sdk.MaxConcurrencyTaskScheduler.QueueTask(System.Threading.Tasks.Task)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Sdk.MaxConcurrencyTaskScheduler.TryExecuteTaskInline(System.Threading.Tasks.Task,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.Sdk.MaxConcurrencyTaskScheduler.MaximumConcurrencyLevel">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.Sdk.EnvironmentalWarning">
            <summary>
            Messages reported during test discovery that indicate that there is an issue with the
            test environment (for example, declaring two test collection classes with the same
            test collection name).
            </summary>
        </member>
        <member name="P:Xunit.Sdk.EnvironmentalWarning.Message">
            <summary>
            The warning message.
            </summary>
        </member>
        <member name="T:Xunit.Sdk.ExceptionUtility">
            <summary>
            Utility methods for dealing with exceptions.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.ExceptionUtility.ConvertExceptionToFailureInformation(System.Exception)">
            <summary>
            Unwraps exceptions and their inner exceptions.
            </summary>
            <param name="ex">The exception to be converted.</param>
            <returns>The failure information.</returns>
        </member>
        <member name="T:Xunit.Sdk.MessageAggregator">
            <summary>
            Default implementation of <see cref="T:Xunit.Sdk.IMessageAggregator"/>.
            </summary>
        </member>
        <member name="F:Xunit.Sdk.MessageAggregator.Instance">
            <summary>
            Gets the singleton instance of <see cref="T:Xunit.Sdk.MessageAggregator"/>.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.MessageAggregator.Add``1(``0)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Sdk.MessageAggregator.GetAndClear``1">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.Sdk.CollectionPerMethodTestCollectionFactory">
            <summary>
            Implementation of <see cref="T:Xunit.Sdk.IXunitTestCollectionFactory"/> which creates a new test
            collection for each test method that isn't decorated with <see cref="T:Xunit.CollectionAttribute"/>.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.CollectionPerMethodTestCollectionFactory.#ctor(Xunit.Abstractions.IAssemblyInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.Sdk.CollectionPerMethodTestCollectionFactory"/> class.
            </summary>
            <param name="assemblyInfo">The assembly.</param>
        </member>
        <member name="M:Xunit.Sdk.CollectionPerMethodTestCollectionFactory.#ctor(Xunit.Abstractions.IAssemblyInfo,Xunit.Sdk.IMessageAggregator)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.Sdk.CollectionPerMethodTestCollectionFactory"/> class.
            </summary>
            <param name="assemblyInfo">The assembly info.</param>
            <param name="messageAggregator">The message aggregator used to report <see cref="T:Xunit.Sdk.EnvironmentalWarning"/> messages.</param>
        </member>
        <member name="M:Xunit.Sdk.CollectionPerMethodTestCollectionFactory.Get(Xunit.Abstractions.IMethodInfo)">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.Sdk.CollectionPerMethodTestCollectionFactory.DisplayName">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.Sdk.LambdaTestCase">
            <summary>
            A simple implementation of <see cref="T:Xunit.Sdk.XunitTestCase"/> wherein the running of the
            test case can be represented by an <see cref="T:System.Action"/>. Useful for emitting test
            cases which later evaluate to error messages (since throwing error messages during
            discovery is often the wrong thing to do). See <see cref="T:Xunit.Sdk.TheoryDiscoverer"/> for
            a use of this test case to emit an error message when a theory method is found
            that has no test data associated with it.
            </summary>
        </member>
        <member name="T:Xunit.Sdk.XunitTestCase">
            <summary>
            Default implementation of <see cref="T:Xunit.Sdk.IXunitTestCase"/> for xUnit v2 that supports tests decorated with
            both <see cref="T:Xunit.FactAttribute"/> and <see cref="T:Xunit.TheoryAttribute"/>.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.XunitTestCase.#ctor(Xunit.Abstractions.ITestCollection,Xunit.Abstractions.IAssemblyInfo,Xunit.Abstractions.ITypeInfo,Xunit.Abstractions.IMethodInfo,Xunit.Abstractions.IAttributeInfo,System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.Sdk.XunitTestCase"/> class.
            </summary>
            <param name="testCollection">The test collection this test case belongs to.</param>
            <param name="assembly">The test assembly.</param>
            <param name="type">The test class.</param>
            <param name="method">The test method.</param>
            <param name="factAttribute">The instance of the <see cref="T:Xunit.FactAttribute"/>.</param>
            <param name="arguments">The arguments for the test method.</param>
        </member>
        <member name="M:Xunit.Sdk.XunitTestCase.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Sdk.XunitTestCase.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Sdk.XunitTestCase.GetBeforeAfterAttributes(System.Type,System.Reflection.MethodInfo)">
            <summary>
            Gets the <see cref="T:Xunit.Sdk.BeforeAfterTestAttribute"/> instances for a test method.
            </summary>
            <param name="classUnderTest">The class under test.</param>
            <param name="methodUnderTest">The method under test.</param>
            <returns>The list of <see cref="T:Xunit.Sdk.BeforeAfterTestAttribute"/> instances.</returns>
        </member>
        <member name="M:Xunit.Sdk.XunitTestCase.GetDisplayNameWithArguments(System.String,System.Object[],Xunit.Abstractions.ITypeInfo[])">
            <summary>
            Supplements a display name for a test method with its arguments.
            </summary>
            <param name="displayName">The base display name.</param>
            <param name="arguments">The test method's arguments.</param>
            <param name="genericTypes">The generic types for the test method.</param>
            <returns>The supplemented display name.</returns>
        </member>
        <member name="M:Xunit.Sdk.XunitTestCase.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Sdk.XunitTestCase.GetRuntimeClass">
            <summary>
            Gets the <see cref="T:System.Type"/> of the class under test.
            </summary>
            <returns>The type under test, if possible; null, if not available.</returns>
        </member>
        <member name="M:Xunit.Sdk.XunitTestCase.GetRuntimeMethod(System.Type)">
            <summary>
            Gets the <see cref="T:System.Reflection.MethodInfo"/> of the method under test.
            </summary>
            <param name="type">The type the method is attached to.</param>
            <returns>The method under test, if possible; null, if not available.</returns>
        </member>
        <member name="M:Xunit.Sdk.XunitTestCase.ResolveGenericTypes(Xunit.Abstractions.IMethodInfo,System.Object[])">
            <summary>
            FOR INTERNAL USE ONLY.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.XunitTestCase.RunAsync(Xunit.Sdk.IMessageBus,System.Object[],Xunit.Sdk.ExceptionAggregator,System.Threading.CancellationTokenSource)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Sdk.XunitTestCase.RunTestsAsync(Xunit.Sdk.IMessageBus,System.Object[],Xunit.Sdk.ExceptionAggregator,System.Threading.CancellationTokenSource)">
            <summary>
            Run the tests in the test case.
            </summary>
            <param name="messageBus">The message bus to send results to.</param>
            <param name="constructorArguments">The arguments to pass to the constructor.</param>
            <param name="aggregator">The error aggregator to use for catching exception.</param>
            <param name="cancellationTokenSource">The cancellation token source that indicates whether cancellation has been requested.</param>
        </member>
        <member name="M:Xunit.Sdk.XunitTestCase.RunTestsOnMethodAsync(Xunit.Sdk.IMessageBus,System.Type,System.Object[],System.Reflection.MethodInfo,System.Collections.Generic.List{Xunit.Sdk.BeforeAfterTestAttribute},Xunit.Sdk.ExceptionAggregator,System.Threading.CancellationTokenSource)">
            <summary>
            Runs the tests for a given test method.
            </summary>
            <param name="messageBus">The message bus to send results to.</param>
            <param name="classUnderTest">The class under test.</param>
            <param name="constructorArguments">The arguments to pass to the constructor.</param>
            <param name="methodUnderTest">The method under test.</param>
            <param name="beforeAfterAttributes">The <see cref="T:Xunit.Sdk.BeforeAfterTestAttribute"/> instances attached to the test.</param>
            <param name="aggregator">The error aggregator to use for catching exception.</param>
            <param name="cancellationTokenSource">The cancellation token source that indicates whether cancellation has been requested.</param>
        </member>
        <member name="M:Xunit.Sdk.XunitTestCase.RunTestWithArgumentsAsync(Xunit.Sdk.IMessageBus,System.Type,System.Object[],System.Reflection.MethodInfo,System.Object[],System.String,System.Collections.Generic.List{Xunit.Sdk.BeforeAfterTestAttribute},Xunit.Sdk.ExceptionAggregator,System.Threading.CancellationTokenSource)">
            <summary>
            Runs a single test for a given test method.
            </summary>
            <param name="messageBus">The message bus to send results to.</param>
            <param name="classUnderTest">The class under test.</param>
            <param name="constructorArguments">The arguments to pass to the constructor.</param>
            <param name="methodUnderTest">The method under test.</param>
            <param name="testMethodArguments">The arguments to pass to the test method.</param>
            <param name="displayName">The display name for the test.</param>
            <param name="beforeAfterAttributes">The <see cref="T:Xunit.Sdk.BeforeAfterTestAttribute"/> instances attached to the test.</param>
            <param name="parentAggregator">The parent aggregator that contains the exceptions up to this point.</param>
            <param name="cancellationTokenSource">The cancellation token source that indicates whether cancellation has been requested.</param>
        </member>
        <member name="P:Xunit.Sdk.XunitTestCase.Arguments">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.Sdk.XunitTestCase.Assembly">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.Sdk.XunitTestCase.Class">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.Sdk.XunitTestCase.DisplayName">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.Sdk.XunitTestCase.Method">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.Sdk.XunitTestCase.SkipReason">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.Sdk.XunitTestCase.SourceInformation">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.Sdk.XunitTestCase.TestCollection">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.Sdk.XunitTestCase.Traits">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.Sdk.XunitTestCase.UniqueID">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Sdk.LambdaTestCase.#ctor(Xunit.Abstractions.ITestCollection,Xunit.Abstractions.IAssemblyInfo,Xunit.Abstractions.ITypeInfo,Xunit.Abstractions.IMethodInfo,Xunit.Abstractions.IAttributeInfo,System.Action)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.Sdk.LambdaTestCase"/> class.
            </summary>
            <param name="testCollection">The test collection this test case belongs to.</param>
            <param name="assembly">The test assembly.</param>
            <param name="testClass">The test class.</param>
            <param name="testMethod">The test method.</param>
            <param name="factAttribute">The instance of <see cref="T:Xunit.FactAttribute"/>.</param>
            <param name="lambda">The code to run for the test.</param>
        </member>
        <member name="M:Xunit.Sdk.LambdaTestCase.RunTestsAsync(Xunit.Sdk.IMessageBus,System.Object[],Xunit.Sdk.ExceptionAggregator,System.Threading.CancellationTokenSource)">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.Sdk.TestCollectionFactoryHelper">
            <summary>
            A helper class that gets the list of test collection definitions for a given assembly.
            Reports any misconfigurations of the test assembly via <see cref="T:Xunit.Sdk.IMessageAggregator"/>.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.TestCollectionFactoryHelper.GetTestCollectionDefinitions(Xunit.Abstractions.IAssemblyInfo,Xunit.Sdk.IMessageAggregator)">
            <summary>
            Gets the test collection definitions for the given assembly.
            </summary>
            <param name="assemblyInfo">The assembly.</param>
            <param name="messageAggregator">The message aggregator.</param>
            <returns>A list of mappings from test collection name to test collection definitions (as <see cref="T:Xunit.Abstractions.ITypeInfo"/></returns>
        </member>
        <member name="T:Xunit.Sdk.XunitTestCollection">
            <summary>
            The implementation of <see cref="T:Xunit.Abstractions.ITestCollection"/> that is used by xUnit.net v2.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.XunitTestCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.Sdk.XunitTestCollection"/> class.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.XunitTestCollection.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Sdk.XunitTestCollection.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.Sdk.XunitTestCollection.CollectionDefinition">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.Sdk.XunitTestCollection.DisplayName">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.Sdk.XunitTestCollection.ID">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.Sdk.CollectionPerAssemblyTestCollectionFactory">
            <summary>
            Implementation of <see cref="T:Xunit.Sdk.IXunitTestCollectionFactory"/> that creates a single
            default test collection for the assembly, and places any tests classes without
            the <see cref="T:Xunit.CollectionAttribute"/> into it.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.CollectionPerAssemblyTestCollectionFactory.#ctor(Xunit.Abstractions.IAssemblyInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.Sdk.CollectionPerAssemblyTestCollectionFactory"/> class.
            </summary>
            <param name="assemblyInfo">The assembly.</param>
        </member>
        <member name="M:Xunit.Sdk.CollectionPerAssemblyTestCollectionFactory.#ctor(Xunit.Abstractions.IAssemblyInfo,Xunit.Sdk.IMessageAggregator)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.Sdk.CollectionPerAssemblyTestCollectionFactory"/> class.
            </summary>
            <param name="assemblyInfo">The assembly.</param>
            <param name="messageAggregator">The message aggregator used to report <see cref="T:Xunit.Sdk.EnvironmentalWarning"/> messages.</param>
        </member>
        <member name="M:Xunit.Sdk.CollectionPerAssemblyTestCollectionFactory.Get(Xunit.Abstractions.IMethodInfo)">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.Sdk.CollectionPerAssemblyTestCollectionFactory.DisplayName">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.Sdk.XunitTheoryTestCase">
            <summary>
            Represents a test case which runs multiple tests for theory data, either because the
            data was not enumerable or because the data was not serializable.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.XunitTheoryTestCase.#ctor(Xunit.Abstractions.ITestCollection,Xunit.Abstractions.IAssemblyInfo,Xunit.Abstractions.ITypeInfo,Xunit.Abstractions.IMethodInfo,Xunit.Abstractions.IAttributeInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.Sdk.XunitTheoryTestCase"/> class.
            </summary>
            <param name="testCollection">The test collection this theory belongs to.</param>
            <param name="assembly">The test assembly.</param>
            <param name="type">The type under test.</param>
            <param name="method">The method under test.</param>
            <param name="theoryAttribute">The theory attribute.</param>
        </member>
        <member name="M:Xunit.Sdk.XunitTheoryTestCase.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc />
        </member>
        <member name="M:Xunit.Sdk.XunitTheoryTestCase.RunTestsOnMethodAsync(Xunit.Sdk.IMessageBus,System.Type,System.Object[],System.Reflection.MethodInfo,System.Collections.Generic.List{Xunit.Sdk.BeforeAfterTestAttribute},Xunit.Sdk.ExceptionAggregator,System.Threading.CancellationTokenSource)">
            <inheritdoc />
        </member>
        <member name="T:Xunit.Sdk.FactDiscoverer">
            <summary>
            Implementation of <see cref="T:Xunit.Sdk.IXunitTestCaseDiscoverer"/> that supports finding test cases
            on methods decorated with <see cref="T:Xunit.FactAttribute"/>.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.FactDiscoverer.Discover(Xunit.Abstractions.ITestCollection,Xunit.Abstractions.IAssemblyInfo,Xunit.Abstractions.ITypeInfo,Xunit.Abstractions.IMethodInfo,Xunit.Abstractions.IAttributeInfo)">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.Sdk.TheoryDiscoverer">
            <summary>
            Implementation of <see cref="T:Xunit.Sdk.IXunitTestCaseDiscoverer"/> that supports finding test cases
            on methods decorated with <see cref="T:Xunit.TheoryAttribute"/>.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.TheoryDiscoverer.Discover(Xunit.Abstractions.ITestCollection,Xunit.Abstractions.IAssemblyInfo,Xunit.Abstractions.ITypeInfo,Xunit.Abstractions.IMethodInfo,Xunit.Abstractions.IAttributeInfo)">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.Sdk.ExecutionTime">
            <summary>
            Meassurs execution time of a processes made out of set of steps
            </summary>
        </member>
        <member name="T:Xunit.Sdk.XunitTestFramework">
            <summary>
            The implementation of <see cref="T:Xunit.Abstractions.ITestFramework"/> that supports discovery and
            execution of unit tests linked against xunit.core.dll, using xunit.execution.dll.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.XunitTestFramework.CreateDiscoverer(Xunit.Abstractions.IAssemblyInfo)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Sdk.XunitTestFramework.CreateExecutor(System.Reflection.AssemblyName)">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.Sdk.XunitTestFrameworkDiscoverer">
            <summary>
            The implementation of <see cref="T:Xunit.Abstractions.ITestFrameworkDiscoverer"/> that supports discovery
            of unit tests linked against xunit.core.dll, using xunit.execution.dll.
            </summary>
        </member>
        <member name="F:Xunit.Sdk.XunitTestFrameworkDiscoverer.DisplayName">
            <summary>
            Gets the display name of the xUnit.net v2 test framework.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.XunitTestFrameworkDiscoverer.#ctor(Xunit.Abstractions.IAssemblyInfo,Xunit.Abstractions.ISourceInformationProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.Sdk.XunitTestFrameworkDiscoverer"/> class.
            </summary>
            <param name="assemblyInfo">The test assembly.</param>
            <param name="sourceProvider">The source information provider.</param>
        </member>
        <member name="M:Xunit.Sdk.XunitTestFrameworkDiscoverer.#ctor(Xunit.Abstractions.IAssemblyInfo,Xunit.Abstractions.ISourceInformationProvider,Xunit.Sdk.IXunitTestCollectionFactory,Xunit.Sdk.IMessageAggregator)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.Sdk.XunitTestFrameworkDiscoverer"/> class.
            </summary>
            <param name="assemblyInfo">The test assembly.</param>
            <param name="sourceProvider">The source information provider.</param>
            <param name="collectionFactory">The test collection factory used to look up test collections.</param>
            <param name="messageAggregator">The message aggregator to receive environmental warnings from.</param>
        </member>
        <member name="M:Xunit.Sdk.XunitTestFrameworkDiscoverer.FindTestsForMethod(Xunit.Abstractions.ITestCollection,Xunit.Abstractions.ITypeInfo,Xunit.Abstractions.IMethodInfo,System.Boolean,Xunit.Sdk.IMessageBus)">
            <summary>
            Finds the tests on a test method.
            </summary>
            <param name="testCollection">The test collection that the test method belongs to.</param>
            <param name="type">The test class that the test method belongs to.</param>
            <param name="method">The test method.</param>
            <param name="includeSourceInformation">Set to <c>true</c> to indicate that source information should be included.</param>
            <param name="messageBus">The message bus to report discovery messages to.</param>
            <returns>Return <c>true</c> to continue test discovery, <c>false</c>, otherwise.</returns>
        </member>
        <member name="M:Xunit.Sdk.XunitTestFrameworkDiscoverer.FindTestsForType(Xunit.Abstractions.ITypeInfo,System.Boolean,Xunit.Sdk.IMessageBus)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Sdk.XunitTestFrameworkDiscoverer.GetDiscoverer(System.Type)">
            <summary>
            Gets the test case discover instance for the given discoverer type. The instances are cached
            and reused, since they should not be stateful.
            </summary>
            <param name="discovererType">The discoverer type.</param>
            <returns>Returns the test case discoverer instance.</returns>
        </member>
        <member name="P:Xunit.Sdk.XunitTestFrameworkDiscoverer.TestCollectionFactory">
            <summary>
            Gets the test collection factory that makes test collections.
            </summary>
        </member>
        <member name="T:Xunit.Sdk.XunitTestFrameworkExecutor">
            <summary>
            The implementation of <see cref="T:Xunit.Abstractions.ITestFrameworkExecutor"/> that supports execution
            of unit tests linked against xunit.core.dll, using xunit.execution.dll.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.XunitTestFrameworkExecutor.#ctor(System.Reflection.AssemblyName,Xunit.Abstractions.ISourceInformationProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.Sdk.XunitTestFrameworkExecutor"/> class.
            </summary>
            <param name="assemblyName">Name of the test assembly.</param>
            <param name="sourceInformationProvider">The source line number information provider.</param>
        </member>
        <member name="M:Xunit.Sdk.XunitTestFrameworkExecutor.CreateDiscoverer">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Sdk.XunitTestFrameworkExecutor.RunTestCases(System.Collections.Generic.IEnumerable{Xunit.Sdk.IXunitTestCase},Xunit.Abstractions.IMessageSink,Xunit.Abstractions.ITestFrameworkOptions)">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.Sdk.MessageBus">
            <summary>
            This is an internal class, and is not intended to be called from end-user code.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.MessageBus.#ctor(Xunit.Abstractions.IMessageSink)">
            <summary/>
        </member>
        <member name="M:Xunit.Sdk.MessageBus.Dispose">
            <summary/>
        </member>
        <member name="M:Xunit.Sdk.MessageBus.QueueMessage(Xunit.Abstractions.IMessageSinkMessage)">
            <summary/>
        </member>
        <member name="T:Xunit.Sdk.TestCaseMessage">
            <summary>
            Default implementation of <see cref="T:Xunit.Abstractions.ITestCaseMessage"/>.
            </summary>
        </member>
        <member name="T:Xunit.Sdk.TestCollectionMessage">
            <summary>
            Default implementation of <see cref="T:Xunit.Abstractions.ITestCollectionMessage"/>.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.TestCollectionMessage.#ctor(Xunit.Abstractions.ITestCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.Sdk.TestCollectionMessage"/> class.
            </summary>
        </member>
        <member name="P:Xunit.Sdk.TestCollectionMessage.TestCollection">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Sdk.TestCaseMessage.#ctor(Xunit.Abstractions.ITestCase)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.Sdk.TestCaseMessage"/> class.
            </summary>
        </member>
        <member name="P:Xunit.Sdk.TestCaseMessage.TestCase">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.Sdk.TestClassMessage">
            <summary>
            Default implementation of <see cref="T:Xunit.Abstractions.ITestClassMessage"/>.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.TestClassMessage.#ctor(Xunit.Abstractions.ITestCollection,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.Sdk.TestClassMessage"/> class.
            </summary>
        </member>
        <member name="P:Xunit.Sdk.TestClassMessage.ClassName">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.Sdk.TestMessage">
            <summary>
            Default implementation of <see cref="T:Xunit.Abstractions.ITestMessage"/>.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.TestMessage.#ctor(Xunit.Abstractions.ITestCase,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.Sdk.TestMessage"/> class.
            </summary>
        </member>
        <member name="P:Xunit.Sdk.TestMessage.TestDisplayName">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.Sdk.BeforeTestFinished">
            <summary>
            Default implementation of <see cref="T:Xunit.Abstractions.IBeforeTestFinished"/>.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.BeforeTestFinished.#ctor(Xunit.Abstractions.ITestCase,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.Sdk.BeforeTestFinished"/> class.
            </summary>
        </member>
        <member name="P:Xunit.Sdk.BeforeTestFinished.AttributeName">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.Sdk.BeforeTestStarting">
            <summary>
            Default implementation of <see cref="T:Xunit.Abstractions.IBeforeTestStarting"/>.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.BeforeTestStarting.#ctor(Xunit.Abstractions.ITestCase,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.Sdk.BeforeTestStarting"/> class.
            </summary>
        </member>
        <member name="P:Xunit.Sdk.BeforeTestStarting.AttributeName">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.Sdk.AfterTestFinished">
            <summary>
            Default implementation of <see cref="T:Xunit.Abstractions.IAfterTestFinished"/>.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.AfterTestFinished.#ctor(Xunit.Abstractions.ITestCase,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.Sdk.AfterTestFinished"/> class.
            </summary>
        </member>
        <member name="P:Xunit.Sdk.AfterTestFinished.AttributeName">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.Sdk.AfterTestStarting">
            <summary>
            Default implementation of <see cref="T:Xunit.Abstractions.IAfterTestStarting"/>.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.AfterTestStarting.#ctor(Xunit.Abstractions.ITestCase,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.Sdk.AfterTestStarting"/> class.
            </summary>
        </member>
        <member name="P:Xunit.Sdk.AfterTestStarting.AttributeName">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.Sdk.DelegatingMessageBus">
            <summary>
            Implementation of <see cref="T:Xunit.Sdk.IMessageBus"/> that delegates to another implementation of
            <see cref="T:Xunit.Sdk.IMessageBus"/> while calling into a callback for each message.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.DelegatingMessageBus.#ctor(Xunit.Sdk.IMessageBus,System.Action{Xunit.Abstractions.IMessageSinkMessage})">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.Sdk.DelegatingMessageBus"/> class.
            </summary>
            <param name="innerMessageBus">The message bus to delegate to.</param>
            <param name="callback">The callback to send messages to.</param>
        </member>
        <member name="M:Xunit.Sdk.DelegatingMessageBus.QueueMessage(Xunit.Abstractions.IMessageSinkMessage)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Sdk.DelegatingMessageBus.Dispose">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.Sdk.DelegatingMessageBus`1">
            <summary>
            Implementation of <see cref="T:Xunit.Sdk.IMessageBus"/> that delegates to another implementation of
            <see cref="T:Xunit.Sdk.IMessageBus"/> while calling into a callback for each message. In addition,
            it issues a <see cref="P:Xunit.Sdk.DelegatingMessageBus`1.Finished"/> event when a message of the type <typeparamref name="TFinalMessage"/>
            is seen.
            </summary>
            <typeparam name="TFinalMessage">The type of the T final message.</typeparam>
        </member>
        <member name="M:Xunit.Sdk.DelegatingMessageBus`1.#ctor(Xunit.Sdk.IMessageBus,System.Action{Xunit.Abstractions.IMessageSinkMessage})">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.Sdk.DelegatingMessageSink`1"/> class.
            </summary>
            <param name="innerMessageBus">The message bus to delegate to.</param>
            <param name="callback">The callback to send messages to.</param>
        </member>
        <member name="M:Xunit.Sdk.DelegatingMessageBus`1.QueueMessage(Xunit.Abstractions.IMessageSinkMessage)">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.Sdk.DelegatingMessageBus`1.FinalMessage">
            <summary>
            The final message that was seen that caused <see cref="P:Xunit.Sdk.DelegatingMessageBus`1.Finished"/> to be triggered.
            </summary>
        </member>
        <member name="P:Xunit.Sdk.DelegatingMessageBus`1.Finished">
            <summary>
            An event that is triggered when a message of type <typeparamref name="TFinalMessage" /> is seen.
            </summary>
        </member>
        <member name="T:Xunit.Sdk.DelegatingMessageSink">
            <summary>
            Implementation of <see cref="T:Xunit.Abstractions.IMessageSink"/> that delegates to another implementation of
            <see cref="T:Xunit.Abstractions.IMessageSink"/> while calling into a callback for each message.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.DelegatingMessageSink.#ctor(Xunit.Abstractions.IMessageSink,System.Action{Xunit.Abstractions.IMessageSinkMessage})">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.Sdk.DelegatingMessageSink"/> class.
            </summary>
            <param name="innerSink">The inner message sink.</param>
            <param name="callback">The callback.</param>
        </member>
        <member name="M:Xunit.Sdk.DelegatingMessageSink.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Sdk.DelegatingMessageSink.OnMessage(Xunit.Abstractions.IMessageSinkMessage)">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.Sdk.DelegatingMessageSink`1">
            <summary>
            Implementation of <see cref="T:Xunit.Abstractions.IMessageSink"/> that delegates to another implementation of
            <see cref="T:Xunit.Abstractions.IMessageSink"/> while calling into a callback for each message. In addition,
            it issues a <see cref="P:Xunit.Sdk.DelegatingMessageSink`1.Finished"/> event when a message of the type <typeparamref name="TFinalMessage"/>
            is seen.
            </summary>
            <typeparam name="TFinalMessage">The type of the T final message.</typeparam>
        </member>
        <member name="M:Xunit.Sdk.DelegatingMessageSink`1.#ctor(Xunit.Abstractions.IMessageSink,System.Action{Xunit.Abstractions.IMessageSinkMessage})">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.Sdk.DelegatingMessageSink"/> class.
            </summary>
            <param name="innerSink">The inner message sink.</param>
            <param name="callback">The callback.</param>
        </member>
        <member name="M:Xunit.Sdk.DelegatingMessageSink`1.OnMessage(Xunit.Abstractions.IMessageSinkMessage)">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.Sdk.DelegatingMessageSink`1.FinalMessage">
            <summary>
            The final message that was seen that caused <see cref="P:Xunit.Sdk.DelegatingMessageSink`1.Finished"/> to be triggered.
            </summary>
        </member>
        <member name="P:Xunit.Sdk.DelegatingMessageSink`1.Finished">
            <summary>
            An event that is triggered when a message of type <typeparamref name="TFinalMessage" /> is seen.
            </summary>
        </member>
        <member name="T:Xunit.Sdk.TestClassConstructionFinished">
            <summary>
            Default implementation of <see cref="T:Xunit.Abstractions.ITestClassConstructionFinished"/>.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.TestClassConstructionFinished.#ctor(Xunit.Abstractions.ITestCase,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.Sdk.TestClassConstructionFinished"/> class.
            </summary>
        </member>
        <member name="T:Xunit.Sdk.TestClassConstructionStarting">
            <summary>
            Default implementation of <see cref="T:Xunit.Abstractions.ITestClassConstructionStarting"/>.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.TestClassConstructionStarting.#ctor(Xunit.Abstractions.ITestCase,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.Sdk.TestClassConstructionStarting"/> class.
            </summary>
        </member>
        <member name="T:Xunit.Sdk.TestClassDisposeFinished">
            <summary>
            Default implementation of <see cref="T:Xunit.Abstractions.ITestClassDisposeFinished"/>.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.TestClassDisposeFinished.#ctor(Xunit.Abstractions.ITestCase,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.Sdk.TestClassDisposeFinished"/> class.
            </summary>
        </member>
        <member name="T:Xunit.Sdk.TestClassDisposeStarting">
            <summary>
            Default implementation of <see cref="T:Xunit.Abstractions.ITestClassDisposeStarting"/>.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.TestClassDisposeStarting.#ctor(Xunit.Abstractions.ITestCase,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.Sdk.TestClassDisposeStarting"/> class.
            </summary>
        </member>
        <member name="T:Xunit.Sdk.TestFailed">
            <summary>
            Default implementation of <see cref="T:Xunit.Abstractions.ITestFailed"/>.
            </summary>
        </member>
        <member name="T:Xunit.Sdk.TestResultMessage">
            <summary>
            Default implementation of <see cref="T:Xunit.Abstractions.ITestResultMessage"/>.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.TestResultMessage.#ctor(Xunit.Abstractions.ITestCase,System.String,System.Decimal,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.Sdk.TestResultMessage"/> class.
            </summary>
        </member>
        <member name="P:Xunit.Sdk.TestResultMessage.ExecutionTime">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.Sdk.TestResultMessage.Output">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Sdk.TestFailed.#ctor(Xunit.Abstractions.ITestCase,System.String,System.Decimal,System.String,System.String[],System.String[],System.String[],System.Int32[])">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.Sdk.TestFailed"/> class.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.TestFailed.#ctor(Xunit.Abstractions.ITestCase,System.String,System.Decimal,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.Sdk.TestFailed"/> class.
            </summary>
        </member>
        <member name="P:Xunit.Sdk.TestFailed.ExceptionTypes">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.Sdk.TestFailed.Messages">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.Sdk.TestFailed.StackTraces">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.Sdk.TestFailed.ExceptionParentIndices">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.Sdk.TestMethodFinished">
            <summary>
            Default implementation of <see cref="T:Xunit.Abstractions.ITestMethodFinished"/>.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.TestMethodFinished.#ctor(Xunit.Abstractions.ITestCollection,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.Sdk.TestMethodFinished"/> class.
            </summary>
        </member>
        <member name="P:Xunit.Sdk.TestMethodFinished.ClassName">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.Sdk.TestMethodFinished.MethodName">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.Sdk.TestMethodStarting">
            <summary>
            Default implementation of <see cref="T:Xunit.Abstractions.ITestMethodStarting"/>.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.TestMethodStarting.#ctor(Xunit.Abstractions.ITestCollection,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.Sdk.TestMethodStarting"/> class.
            </summary>
        </member>
        <member name="P:Xunit.Sdk.TestMethodStarting.ClassName">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.Sdk.TestMethodStarting.MethodName">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.Sdk.TestSkipped">
            <summary>
            Default implementation of <see cref="T:Xunit.Abstractions.ITestSkipped"/>.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.TestSkipped.#ctor(Xunit.Abstractions.ITestCase,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.Sdk.TestSkipped"/> class.
            </summary>
        </member>
        <member name="P:Xunit.Sdk.TestSkipped.Reason">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.Sdk.DiscoveryCompleteMessage">
            <summary>
            Default implementation of <see cref="T:Xunit.Abstractions.IDiscoveryCompleteMessage"/>.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.DiscoveryCompleteMessage.#ctor(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.Sdk.DiscoveryCompleteMessage"/> class.
            </summary>
        </member>
        <member name="P:Xunit.Sdk.DiscoveryCompleteMessage.Warnings">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.Sdk.ErrorMessage">
            <summary>
            Default implementation of <see cref="T:Xunit.Abstractions.IErrorMessage"/>.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.ErrorMessage.#ctor(System.String[],System.String[],System.String[],System.Int32[])">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.Sdk.ErrorMessage"/> class.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.ErrorMessage.#ctor(System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.Sdk.ErrorMessage"/> class.
            </summary>
            <param name="ex">The exception that represents the error message.</param>
        </member>
        <member name="P:Xunit.Sdk.ErrorMessage.ExceptionTypes">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.Sdk.ErrorMessage.Messages">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.Sdk.ErrorMessage.StackTraces">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.Sdk.ErrorMessage.ExceptionParentIndices">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.Sdk.TestCaseFinished">
            <summary>
            Default implementation of <see cref="T:Xunit.Abstractions.ITestCaseFinished"/>.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.TestCaseFinished.#ctor(Xunit.Abstractions.ITestCase,System.Decimal,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.Sdk.TestCaseFinished"/> class.
            </summary>
        </member>
        <member name="P:Xunit.Sdk.TestCaseFinished.ExecutionTime">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.Sdk.TestCaseFinished.TestsFailed">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.Sdk.TestCaseFinished.TestsRun">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.Sdk.TestCaseFinished.TestsSkipped">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.Sdk.TestCaseStarting">
            <summary>
            Default implementation of <see cref="T:Xunit.Abstractions.ITestCaseStarting"/>.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.TestCaseStarting.#ctor(Xunit.Abstractions.ITestCase)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.Sdk.TestCaseStarting"/> class.
            </summary>
        </member>
        <member name="T:Xunit.Sdk.TestClassFinished">
            <summary>
            Default implementation of <see cref="T:Xunit.Abstractions.ITestClassFinished"/>.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.TestClassFinished.#ctor(Xunit.Abstractions.ITestCollection,System.String,System.Decimal,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.Sdk.TestClassFinished"/> class.
            </summary>
        </member>
        <member name="P:Xunit.Sdk.TestClassFinished.ExecutionTime">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.Sdk.TestClassFinished.TestsFailed">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.Sdk.TestClassFinished.TestsRun">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.Sdk.TestClassFinished.TestsSkipped">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.Sdk.TestClassStarting">
            <summary>
            Default implementation of <see cref="T:Xunit.Abstractions.ITestClassStarting"/>.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.TestClassStarting.#ctor(Xunit.Abstractions.ITestCollection,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.Sdk.TestClassStarting"/> class.
            </summary>
        </member>
        <member name="T:Xunit.Sdk.TestCollectionFinished">
            <summary>
            Default implementation of <see cref="T:Xunit.Abstractions.ITestCollectionFinished"/>.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.TestCollectionFinished.#ctor(Xunit.Abstractions.ITestCollection,System.Decimal,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.Sdk.TestCollectionFinished"/> class.
            </summary>
        </member>
        <member name="P:Xunit.Sdk.TestCollectionFinished.ExecutionTime">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.Sdk.TestCollectionFinished.TestsFailed">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.Sdk.TestCollectionFinished.TestsRun">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.Sdk.TestCollectionFinished.TestsSkipped">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.Sdk.TestCollectionStarting">
            <summary>
            Default implementation of <see cref="T:Xunit.Abstractions.ITestCollectionStarting"/>.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.TestCollectionStarting.#ctor(Xunit.Abstractions.ITestCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.Sdk.TestCollectionStarting"/> class.
            </summary>
        </member>
        <member name="T:Xunit.Sdk.TestFinished">
            <summary>
            Default implementation of <see cref="T:Xunit.Abstractions.ITestFinished"/>.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.TestFinished.#ctor(Xunit.Abstractions.ITestCase,System.String,System.Decimal,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.Sdk.TestFinished"/> class.
            </summary>
        </member>
        <member name="P:Xunit.Sdk.TestFinished.ExecutionTime">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.Sdk.TestFinished.Output">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.Sdk.TestPassed">
            <summary>
            Default implementation of <see cref="T:Xunit.Abstractions.ITestPassed"/>.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.TestPassed.#ctor(Xunit.Abstractions.ITestCase,System.String,System.Decimal,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.Sdk.TestPassed"/> class.
            </summary>
        </member>
        <member name="T:Xunit.Sdk.TestStarting">
            <summary>
            Default implementation of <see cref="T:Xunit.Abstractions.ITestStarting"/>.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.TestStarting.#ctor(Xunit.Abstractions.ITestCase,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.Sdk.TestStarting"/> class.
            </summary>
        </member>
        <member name="T:Xunit.Sdk.TestAssemblyFinished">
            <summary>
            Default implementation of <see cref="T:Xunit.Abstractions.ITestAssemblyFinished"/>.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.TestAssemblyFinished.#ctor(Xunit.Abstractions.IAssemblyInfo,System.Decimal,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.Sdk.TestAssemblyFinished"/> class.
            </summary>
        </member>
        <member name="P:Xunit.Sdk.TestAssemblyFinished.Assembly">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.Sdk.TestAssemblyFinished.ExecutionTime">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.Sdk.TestAssemblyFinished.TestsFailed">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.Sdk.TestAssemblyFinished.TestsRun">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.Sdk.TestAssemblyFinished.TestsSkipped">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.Sdk.TestAssemblyStarting">
            <summary>
            Default implementation of <see cref="T:Xunit.Abstractions.ITestAssemblyStarting"/>.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.TestAssemblyStarting.#ctor(System.String,System.String,System.DateTime,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.Sdk.TestAssemblyStarting"/> class.
            </summary>
        </member>
        <member name="P:Xunit.Sdk.TestAssemblyStarting.AssemblyFileName">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.Sdk.TestAssemblyStarting.ConfigFileName">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.Sdk.TestAssemblyStarting.StartTime">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.Sdk.TestAssemblyStarting.TestEnvironment">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.Sdk.TestAssemblyStarting.TestFrameworkDisplayName">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.Sdk.TestCaseDiscoveryMessage">
            <summary>
            Default implementation of <see cref="T:Xunit.Abstractions.ITestCaseDiscoveryMessage"/>.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.TestCaseDiscoveryMessage.#ctor(Xunit.Abstractions.ITestCase)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.Sdk.TestCaseDiscoveryMessage"/> class.
            </summary>
        </member>
        <member name="T:Xunit.Sdk.ReflectionTypeInfo">
            <summary>
            Reflection-based implementation of <see cref="T:Xunit.Abstractions.IReflectionTypeInfo"/>.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.ReflectionTypeInfo.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.Sdk.ReflectionTypeInfo"/> class.
            </summary>
            <param name="type">The type to wrap.</param>
        </member>
        <member name="M:Xunit.Sdk.ReflectionTypeInfo.GetCustomAttributes(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Sdk.ReflectionTypeInfo.GetGenericArguments">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Sdk.ReflectionTypeInfo.GetMethods(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Sdk.ReflectionTypeInfo.ToString">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.Sdk.ReflectionTypeInfo.Assembly">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.Sdk.ReflectionTypeInfo.BaseType">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.Sdk.ReflectionTypeInfo.Interfaces">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.Sdk.ReflectionTypeInfo.IsAbstract">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.Sdk.ReflectionTypeInfo.IsGenericParameter">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.Sdk.ReflectionTypeInfo.IsGenericType">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.Sdk.ReflectionTypeInfo.IsSealed">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.Sdk.ReflectionTypeInfo.IsValueType">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.Sdk.ReflectionTypeInfo.Name">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.Sdk.ReflectionTypeInfo.Type">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.Sdk.ReflectionParameterInfo">
            <summary>
            Reflection-based implementation of <see cref="T:Xunit.Abstractions.IReflectionParameterInfo"/>.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.ReflectionParameterInfo.#ctor(System.Reflection.ParameterInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.Sdk.ReflectionParameterInfo"/> class.
            </summary>
            <param name="parameterInfo">The parameter to be wrapped.</param>
        </member>
        <member name="P:Xunit.Sdk.ReflectionParameterInfo.Name">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.Sdk.ReflectionParameterInfo.ParameterInfo">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.Sdk.ReflectionParameterInfo.ParameterType">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.Sdk.ReflectionMethodInfo">
            <summary>
            Reflection-based implementation of <see cref="T:Xunit.Abstractions.IReflectionMethodInfo"/>.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.ReflectionMethodInfo.#ctor(System.Reflection.MethodInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.Sdk.ReflectionMethodInfo"/> class.
            </summary>
            <param name="method">The method to be wrapped.</param>
        </member>
        <member name="M:Xunit.Sdk.ReflectionMethodInfo.GetCustomAttributes(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Sdk.ReflectionMethodInfo.GetGenericArguments">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Sdk.ReflectionMethodInfo.MakeGenericMethod(Xunit.Abstractions.ITypeInfo[])">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Sdk.ReflectionMethodInfo.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Sdk.ReflectionMethodInfo.GetParameters">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.Sdk.ReflectionMethodInfo.IsAbstract">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.Sdk.ReflectionMethodInfo.IsGenericMethodDefinition">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.Sdk.ReflectionMethodInfo.IsPublic">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.Sdk.ReflectionMethodInfo.IsStatic">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.Sdk.ReflectionMethodInfo.MethodInfo">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.Sdk.ReflectionMethodInfo.Name">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.Sdk.ReflectionMethodInfo.ReturnType">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.Sdk.ReflectionMethodInfo.Type">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.Sdk.ReflectionAssemblyInfo">
            <summary>
            Reflection-based implementation of <see cref="T:Xunit.Abstractions.IReflectionAssemblyInfo"/>.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.ReflectionAssemblyInfo.#ctor(System.Reflection.Assembly)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.Sdk.ReflectionAssemblyInfo"/> class.
            </summary>
            <param name="assembly">The assembly to be wrapped.</param>
        </member>
        <member name="M:Xunit.Sdk.ReflectionAssemblyInfo.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.Sdk.ReflectionAssemblyInfo"/> class.
            </summary>
            <param name="assemblyFileName">The assembly to be wrapped.</param>
        </member>
        <member name="M:Xunit.Sdk.ReflectionAssemblyInfo.GetCustomAttributes(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Sdk.ReflectionAssemblyInfo.GetType(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Sdk.ReflectionAssemblyInfo.GetTypes(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Sdk.ReflectionAssemblyInfo.ToString">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.Sdk.ReflectionAssemblyInfo.Assembly">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.Sdk.ReflectionAssemblyInfo.AssemblyPath">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.Sdk.ReflectionAssemblyInfo.Name">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.Sdk.ReflectionAttributeInfo">
            <summary>
            Reflection-based implementation of <see cref="T:Xunit.Abstractions.IReflectionAttributeInfo"/>.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.ReflectionAttributeInfo.#ctor(System.Reflection.CustomAttributeData)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.Sdk.ReflectionAttributeInfo"/> class.
            </summary>
            <param name="attribute">The attribute to be wrapped.</param>
        </member>
        <member name="M:Xunit.Sdk.ReflectionAttributeInfo.GetConstructorArguments">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Sdk.ReflectionAttributeInfo.GetCustomAttributes(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Sdk.ReflectionAttributeInfo.GetNamedArgument``1(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Sdk.ReflectionAttributeInfo.ToString">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.Sdk.ReflectionAttributeInfo.Attribute">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.Sdk.ReflectionAttributeInfo.AttributeData">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.Sdk.Reflector">
            <summary>
            Wrapper to implement types from xunit.abstractions.dll using reflection.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.Reflector.ConvertArguments(System.Object[],System.Type[])">
            <summary>
            Converts arguments into their target types. Can be particularly useful when pulling attribute
            constructor arguments, whose types may not strictly match the parameter types.
            </summary>
            <param name="args">The arguments to be converted.</param>
            <param name="types">The target types for the conversion.</param>
            <returns>The converted arguments.</returns>
        </member>
        <member name="M:Xunit.Sdk.Reflector.Wrap(System.Reflection.Assembly)">
            <summary>
            Converts an <see cref="T:System.Reflection.Assembly"/> into an <see cref="T:Xunit.Abstractions.IReflectionAssemblyInfo"/>.
            </summary>
            <param name="assembly">The assembly to wrap.</param>
            <returns>The wrapper</returns>
        </member>
        <member name="M:Xunit.Sdk.Reflector.Wrap(System.Reflection.CustomAttributeData)">
            <summary>
            Converts an <see cref="T:System.Attribute"/> into an <see cref="T:Xunit.Abstractions.IAttributeInfo"/> using reflection.
            </summary>
            <param name="attribute">The attribute to wrap.</param>
            <returns>The wrapper</returns>
        </member>
        <member name="M:Xunit.Sdk.Reflector.Wrap(System.Reflection.MethodInfo)">
            <summary>
            Converts a <see cref="T:System.Reflection.MethodInfo"/> into an <see cref="T:Xunit.Abstractions.IMethodInfo"/> using reflection.
            </summary>
            <param name="method">The method to wrap</param>
            <returns>The wrapper</returns>
        </member>
        <member name="M:Xunit.Sdk.Reflector.Wrap(System.Reflection.ParameterInfo)">
            <summary>
            Converts a <see cref="T:System.Reflection.ParameterInfo"/> into an <see cref="T:Xunit.Abstractions.IParameterInfo"/> using reflection.
            </summary>
            <param name="parameter">THe parameter to wrap</param>
            <returns>The wrapper</returns>
        </member>
        <member name="M:Xunit.Sdk.Reflector.Wrap(System.Type)">
            <summary>
            Converts a <see cref="T:System.Type"/> into an <see cref="T:Xunit.Abstractions.ITypeInfo"/> using reflection.
            </summary>
            <param name="type">The type to wrap</param>
            <returns>The wrapper</returns>
        </member>
        <member name="M:Xunit.Sdk.Reflector.GetType(System.String)">
            <summary>
            Converts an assembly qualified type name into a <see cref="T:System.Type"/> object.
            </summary>
            <param name="assemblyQualifiedTypeName">The assembly qualified type name.</param>
            <returns>The instance of the <see cref="T:System.Type"/>, if available; <c>null</c>, otherwise.</returns>
        </member>
        <member name="M:Xunit.Sdk.Reflector.GetType(System.String,System.String)">
            <summary>
            Converts an assembly name + type name into a <see cref="T:System.Type"/> object.
            </summary>
            <param name="assemblyName">The assembly name.</param>
            <param name="typeName">The type name.</param>
            <returns>The instance of the <see cref="T:System.Type"/>, if available; <c>null</c>, otherwise.</returns>
        </member>
        <member name="T:Xunit.Sdk.SerializationHelper">
            <summary>
            Serializes and de-serializes <see cref="T:Xunit.Abstractions.ITestCase"/> instances using <see cref="F:Xunit.Sdk.SerializationHelper.BinaryFormatter"/>,
            <see cref="M:System.Convert.ToBase64String(System.Byte[])"/>, and <see cref="M:System.Convert.FromBase64String(System.String)"/>.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.SerializationHelper.Deserialize``1(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Sdk.SerializationHelper.Serialize(System.Object)">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.Sdk.SynchronousMessageBus">
            <summary>
            This is an internal class, and is not intended to be called from end-user code.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.SynchronousMessageBus.#ctor(Xunit.Abstractions.IMessageSink)">
            <summary/>
        </member>
        <member name="M:Xunit.Sdk.SynchronousMessageBus.Dispose">
            <summary/>
        </member>
        <member name="M:Xunit.Sdk.SynchronousMessageBus.QueueMessage(Xunit.Abstractions.IMessageSinkMessage)">
            <summary/>
        </member>
        <member name="T:Xunit.Sdk.TestClassException">
            <summary>
            Represents an exception that happened during the process of a test class. This typically
            means there were problems identifying the correct test class constructor, or problems
            creating the fixture data for the test class.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.TestClassException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.Sdk.TestClassException"/> class.
            </summary>
            <param name="message">The exception message.</param>
        </member>
        <member name="M:Xunit.Sdk.TestClassException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc/>
        </member>
    </members>
</doc>
